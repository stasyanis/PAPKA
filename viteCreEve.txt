.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(5px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
  opacity: 0;
  visibility: hidden;
  transition: var(--transition);
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal {
  background: var(--white);
  border-radius: var(--radius);
  width: 90%;
  max-width: 750px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
  position: relative;
  border: 1px solid var(--border);
  animation: scaleIn 0.3s ease;
}

@keyframes scaleIn {
  from {
    transform: scale(0.9);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

.close-modal {
  position: absolute;
  top: 18px;
  right: 18px;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  transition: var(--transition);
  border: 1px solid var(--border);
}

.close-modal:hover {
  background: #e0e0e0;
  transform: rotate(90deg);
}

.modal-content {
  padding: 35px;
}

/* Модальное окно мероприятия */
.event-modal-wide .modal {
  max-width: 900px;
}

.event-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 22px;
  flex-wrap: wrap;
  gap: 15px;
}

.event-category {
  display: inline-block;
  padding: 7px 18px;
  border-radius: 28px;
  font-size: 14px;
  font-weight: 600;
  color: white;
}

.event-title {
  font-size: 28px;
  color: var(--primary);
  margin: 12px 0;
  line-height: 1.3;
  width: 100%;
}

.event-id {
  font-size: 14px;
  color: var(--gray);
  margin-top: -10px;
  margin-bottom: 10px;
  font-weight: 500;
}

.event-tabs {
  display: flex;
  gap: 10px;
  margin-bottom: 22px;
  border-bottom: 1px solid var(--border);
  padding-bottom: 10px;
}

.event-tab {
  padding: 10px 20px;
  background: var(--light);
  border-radius: 28px;
  cursor: pointer;
  font-size: 14px;
  border: 1px solid transparent;
  transition: var(--transition);
}

.event-tab.active {
  background: var(--accent);
  color: white;
  border-color: var(--accent);
}

.event-content {
  margin-top: 20px;
}

.event-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 25px;
  margin-bottom: 22px;
}

.event-meta-item {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 16px;
}

.event-meta-item i {
  font-size: 22px;
  color: var(--accent);
}

.event-description {
  font-size: 16px;
  line-height: 1.7;
  margin-bottom: 28px;
  color: var(--text);
}

.event-participants {
  background: var(--light);
  border-radius: var(--radius-sm);
  padding: 18px;
  margin-bottom: 28px;
  border: 1px solid var(--border);
}

.participants-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 14px;
  font-size: 16px;
  color: var(--primary);
  flex-wrap: wrap;
  gap: 10px;
}

.progress-container {
  width: 100%;
  background: #e0e0e0;
  border-radius: 10px;
  overflow: hidden;
  height: 10px;
}

.progress-bar {
  height: 100%;
  background: linear-gradient(to right, var(--accent), var(--secondary));
  width: 70%;
  transition: width 0.5s ease;
}

.event-action {
  width: 100%;
  padding: 16px;
  background: linear-gradient(to right, var(--primary), var(--secondary));
  color: white;
  border: none;
  border-radius: var(--radius-sm);
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.event-action:hover {
  transform: translateY(-2px);
  box-shadow: 0 7px 15px rgba(42, 77, 105, 0.4);
}

.event-action.participated {
  background: var(--success);
}


src\pages\Events.jsx

import { useState } from 'react'
import { useAuth } from '../context/AuthContext'
import { useEvents } from '../context/EventContext'
import EventCard from '../components/events/EventCard'
import EventForm from '../components/events/EventForm'
import Button from '../components/ui/Button'

const Events = () => {
  const { isTeacher } = useAuth()
  const { futureEvents, pastEvents } = useEvents()
  const [activeTab, setActiveTab] = useState('upcoming')
  const [showForm, setShowForm] = useState(false)
  const [editingEvent, setEditingEvent] = useState(null)

  const handleEdit = (event) => {
    setEditingEvent(event)
    setShowForm(true)
  }

  const handleFormClose = () => {
    setShowForm(false)
    setEditingEvent(null)
  }

  return (
    <div className="events-page">
      <h2 className="section-title">
        <i className="fas fa-calendar-check"></i> Мои мероприятия
      </h2>
      
      <div className="events-tabs">
        <button 
          className={`events-tab ${activeTab === 'upcoming' ? 'active' : ''}`}
          onClick={() => setActiveTab('upcoming')}
        >
          Будущие события
        </button>
        <button 
          className={`events-tab ${activeTab === 'past' ? 'active' : ''}`}
          onClick={() => setActiveTab('past')}
        >
          Прошедшие события
        </button>
      </div>
      
      <div className="events-content">
        {activeTab === 'upcoming' && (
          <div className="events-grid">
            {futureEvents.length > 0 ? (
              futureEvents.map(event => (
                <EventCard 
                  key={event.id} 
                  event={event} 
                  showActions={isTeacher}
                  onEdit={handleEdit}
                />
              ))
            ) : (
              <p>Нет запланированных мероприятий</p>
            )}
          </div>
        )}
        
        {activeTab === 'past' && (
          <div className="events-grid">
            {pastEvents.length > 0 ? (
              pastEvents.map(event => (
                <EventCard key={event.id} event={event} />
              ))
            ) : (
              <p>Нет завершенных мероприятий</p>
            )}
          </div>
        )}
      </div>
      
      {isTeacher && (
        <div className="create-event-btn">
          <Button primary icon="plus" onClick={() => setShowForm(true)}>
            Создать новое мероприятие
          </Button>
        </div>
      )}
      
      {showForm && (
        <EventForm 
          event={editingEvent} 
          onClose={handleFormClose} 
        />
      )}
    </div>
  )
}

export default Events

src\components\events\CreateEventModal.jsx

import { useState } from 'react';
import { useAppContext } from '../../context/AppContext';

const CreateEventModal = ({ isOpen, onClose }) => {
  const { createEvent } = useAppContext();
  const [activeTab, setActiveTab] = useState('basic');
  const [formData, setFormData] = useState({
    title: '',
    category: 'Общественное мероприятие',
    date: '',
    time: '',
    duration: '2 часа',
    location: '',
    description: '',
    maxParticipants: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const event = createEvent(formData);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal">
        <div className="close-modal" onClick={onClose}>
          <i className="fas fa-times"></i>
        </div>
        <div className="modal-content">
          <div className="event-editor">
            <div className="editor-header">
              <h2 className="editor-title">Создание мероприятия</h2>
              <div className="editor-tabs">
                <button 
                  className={`editor-tab ${activeTab === 'basic' ? 'active' : ''}`}
                  onClick={() => setActiveTab('basic')}
                >
                  Основное
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'participants' ? 'active' : ''}`}
                  onClick={() => setActiveTab('participants')}
                >
                  Участники
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'notifications' ? 'active' : ''}`}
                  onClick={() => setActiveTab('notifications')}
                >
                  Уведомления
                </button>
              </div>
            </div>
            
            <form onSubmit={handleSubmit}>
              {activeTab === 'basic' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Информация о мероприятии</h3>
                  
                  <div className="form-group">
                    <label className="form-label">Название мероприятия</label>
                    <input
                      type="text"
                      name="title"
                      value={formData.title}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Введите название"
                    />
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Категория</label>
                        <select
                          name="category"
                          value={formData.category}
                          onChange={handleChange}
                          className="form-control"
                          required
                        >
                          <option>Концерт</option>
                          <option>Внутривузовская активность</option>
                          <option>Общественное мероприятие</option>
                          <option>Соревнование</option>
                          <option>Лекция</option>
                          <option>Мастер-класс</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Дата</label>
                        <input
                          type="date"
                          name="date"
                          value={formData.date}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Время начала</label>
                        <input
                          type="time"
                          name="time"
                          value={formData.time}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Продолжительность</label>
                        <input
                          type="text"
                          name="duration"
                          value={formData.duration}
                          onChange={handleChange}
                          className="form-control"
                          placeholder="Например, 2 часа"
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Место проведения</label>
                    <input
                      type="text"
                      name="location"
                      value={formData.location}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Аудитория 101, ул. Станке Димитрова, 3"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Описание</label>
                    <textarea
                      name="description"
                      value={formData.description}
                      onChange={handleChange}
                      className="form-control"
                      rows="4"
                      placeholder="Подробное описание мероприятия"
                      required
                    ></textarea>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Максимальное количество участников</label>
                    <input
                      type="number"
                      name="maxParticipants"
                      value={formData.maxParticipants}
                      onChange={handleChange}
                      className="form-control"
                      placeholder="0 - без ограничений"
                    />
                  </div>
                </div>
              )}
              
              {activeTab === 'participants' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Управление участниками</h3>
                  <p>Функционал участников будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              {activeTab === 'notifications' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Уведомления участникам</h3>
                  <p>Функционал уведомлений будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              <div className="editor-actions">
                <button 
                  type="button" 
                  className="editor-btn btn-cancel"
                  onClick={onClose}
                >
                  Отмена
                </button>
                <button 
                  type="submit" 
                  className="editor-btn btn-save"
                >
                  Сохранить мероприятие
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateEventModal;

src\components\events\CompleteEventModal.jsx

import { useState } from 'react';
import Modal from '../ui/Modal';
import Button from '../ui/Button';

const CompleteEventModal = ({ event, onClose }) => {
  const [formData, setFormData] = useState({
    title: `Отчет: ${event?.title || 'Мероприятие'}`,
    summary: '',
    tasks: ['', '', ''],
    images: []
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleTaskChange = (index, value) => {
    const newTasks = [...formData.tasks];
    newTasks[index] = value;
    setFormData(prev => ({ ...prev, tasks: newTasks }));
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    const newImages = files.map(file => URL.createObjectURL(file));
    setFormData(prev => ({ 
      ...prev, 
      images: [...prev.images, ...newImages] 
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Report submitted:', formData);
    onClose();
  };

  return (
    <Modal isOpen={true} onClose={onClose} title="Завершение мероприятия">
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label className="form-label">Заголовок новости</label>
          <input
            type="text"
            name="title"
            value={formData.title}
            onChange={handleChange}
            className="form-control"
            required
          />
        </div>

        <div className="form-group">
          <label className="form-label">Описание мероприятия</label>
          <textarea
            name="summary"
            value={formData.summary}
            onChange={handleChange}
            className="form-control"
            rows="4"
            placeholder="Расскажите о том, как прошло мероприятие"
            required
          />
        </div>

        <div className="form-group">
          <label className="form-label">Выполненные задачи</label>
          {formData.tasks.map((task, index) => (
            <input
              key={index}
              type="text"
              value={task}
              onChange={(e) => handleTaskChange(index, e.target.value)}
              className="form-control"
              placeholder={`Задача ${index + 1}`}
              style={{ marginBottom: '8px' }}
            />
          ))}
        </div>

        <div className="form-group">
          <label className="form-label">Фотоотчет</label>
          <input
            type="file"
            multiple
            accept="image/*"
            onChange={handleImageUpload}
            className="form-control"
          />
          <div className="event-gallery">
            {formData.images.map((img, index) => (
              <img 
                key={index} 
                src={img} 
                alt={`Preview ${index}`} 
                className="gallery-image"
              />
            ))}
          </div>
        </div>

        <div className="editor-actions">
          <Button type="button" onClick={onClose}>Отмена</Button>
          <Button type="submit" primary>Опубликовать отчет</Button>
        </div>
      </form>
    </Modal>
  );
};

export default CompleteEventModal;

.\src\App.jsx

import { useState } from 'react';
import { AppProvider } from './context/AppContext';
import Header from './components/layout/Header';
import CategoryFilter from './components/events/CategoryFilter';
import Banner from './components/sections/Banner';
import CalendarSection from './components/sections/CalendarSection';
import NewsSection from './components/sections/NewsSection';
import Footer from './components/layout/Footer';
import MyEventsPage from './pages/MyEventsPage';
import CreateEventModal from './components/events/CreateEventModal';

function App() {
  const [activePage, setActivePage] = useState('home');
  const [createModalOpen, setCreateModalOpen] = useState(false);
  const [events] = useState([
    {
      id: 1,
      title: "День открытых дверей БГИТУ",
      category: "Общественное мероприятие",
      date: "2025-07-15",
      time: "10:00 - 14:00",
      location: "Главный корпус, ауд. 301",
      description: "Приглашаем абитуриентов и их родителей на ежегодный День открытых дверей...",
      maxParticipants: 150,
      currentParticipants: 98,
      isPast: false,
      images: [],
      report: null
    },
    {
      id: 101,
      title: "Уборка Центрального парка",
      category: "Волонтерская активность",
      date: "2025-07-10",
      time: "09:00 - 13:00",
      location: "Центральный парк, Брянск",
      description: "Волонтеры БГИТУ провели масштабную уборку Центрального парка.",
      isPast: true,
      images: [
        'https://images.unsplash.com/photo-1523580494863-6f3031224c94?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
      ],
      report: {
        comment: "За 4 часа было собрано более 50 мешков мусора...",
        tasks: ["Сбор мусора", "Покраска скамеек"]
      }
    }
  ]);

  const renderContent = () => {
    if (activePage === 'my-events') {
      return <MyEventsPage />;
    }
    
    return (
      <>
        <CategoryFilter />
        <Banner events={events} />
        <CalendarSection events={events} />
        <NewsSection events={events.filter(event => event.isPast && event.report)} />
      </>
    );
  };

  return (
    <AppProvider>
      <div className="app">
        <Header 
          onMyEventsClick={() => setActivePage('my-events')}
          onHomeClick={() => setActivePage('home')}
          onCreateEventClick={() => setCreateModalOpen(true)}
        />
        
        <main>
          {renderContent()}
        </main>
        
        <Footer />
        
        <CreateEventModal 
          isOpen={createModalOpen}
          onClose={() => setCreateModalOpen(false)}
        />
      </div>
    </AppProvider>
  );
}

export default App;
