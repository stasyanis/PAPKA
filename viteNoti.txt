.header {
  background: var(--white);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  padding: 12px 5%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: sticky;
  top: 0;
  z-index: 1000;
  animation: slideDown 0.5s ease;
}

@keyframes slideDown {
  from { transform: translateY(-100%); }
  to { transform: translateY(0); }
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
}

.logo {
  width: 46px;
  height: 46px;
  background: linear-gradient(135deg, var(--primary), var(--secondary));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-size: 22px;
  box-shadow: var(--shadow);
  transition: var(--transition);
}

.logo:hover {
  transform: rotate(15deg);
}

.logo-text {
  font-size: 20px;
  font-weight: 600;
  color: var(--primary);
}

.logo-text span {
  color: var(--accent);
  transition: var(--transition);
}

.search-container {
  flex: 1;
  max-width: 600px;
  margin: 0 25px;
  position: relative;
}

.search-box {
  width: 100%;
  padding: 12px 18px;
  border: 1px solid var(--border);
  border-radius: 28px;
  font-size: 15px;
  transition: var(--transition);
  padding-left: 45px;
  background: var(--light-gray);
}

.search-box:focus {
  outline: none;
  border-color: var(--accent);
  box-shadow: 0 0 0 3px rgba(75, 134, 180, 0.15);
}

.search-icon {
  position: absolute;
  left: 18px;
  top: 50%;
  transform: translateY(-50%);
  color: #999;
  font-size: 16px;
}

.header-actions {
  display: flex;
  align-items: center;
  gap: 16px;
}

.notification-container, 
.profile-container {
  position: relative;
  cursor: pointer;
}

.header-icon {
  width: 38px;
  height: 38px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  transition: var(--transition);
  border: 1px solid var(--border);
}

.header-icon:hover {
  background: #e6f0ff;
  border-color: var(--accent);
  transform: scale(1.05);
}

.notification-count {
  position: absolute;
  top: -5px;
  right: -5px;
  background: var(--danger);
  color: white;
  font-size: 11px;
  font-weight: bold;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

/* Выпадающие меню */
.dropdown {
  position: absolute;
  top: 54px;
  right: 0;
  width: 260px;
  background: var(--white);
  border-radius: var(--radius);
  box-shadow: var(--shadow-hover);
  z-index: 100;
  opacity: 0;
  visibility: hidden;
  transform: translateY(-10px);
  transition: var(--transition);
  border: 1px solid var(--border);
}

.dropdown.active {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.dropdown-header {
  padding: 14px;
  border-bottom: 1px solid var(--border);
  font-weight: 600;
  color: var(--primary);
  background: var(--light);
  border-radius: var(--radius) var(--radius) 0 0;
}

.dropdown-item {
  padding: 12px 14px;
  display: flex;
  align-items: center;
  gap: 10px;
  transition: var(--transition);
  cursor: pointer;
  font-size: 15px;
}

.dropdown-item:hover {
  background: var(--light);
  transform: translateX(5px);
}

.dropdown-item i {
  width: 28px;
  text-align: center;
  color: var(--accent);
}

.\src\components\layout\Header.jsx

import { useState, useRef, useEffect } from 'react';
import { useAppContext } from '../../context/AppContext';
import Notifications from '../ui/Notification';

const Header = ({ onMyEventsClick, onHomeClick, onCreateEventClick }) => {
  const { user, logout } = useAppContext();
  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false);
  const profileRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (profileRef.current && !profileRef.current.contains(e.target)) {
        setProfileDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleLogout = () => {
    logout();
    setProfileDropdownOpen(false);
  };

  return (
    <header className="header">
      <a href="#" className="logo-container" onClick={(e) => {
        e.preventDefault();
        onHomeClick();
      }}>
        <div className="logo">БГ</div>
        <div className="logo-text">БГИТУ <span>Афиша</span></div>
      </a>
      
      <div className="search-container">
        <i className="fas fa-search search-icon"></i>
        <input 
          type="text" 
          className="search-box" 
          placeholder="Поиск мероприятий..." 
        />
      </div>
      
      <div className="header-actions">
        <button 
          className="header-btn"
          onClick={onMyEventsClick}
        >
          <i className="fas fa-calendar-alt"></i>
          <span className="header-text">Мои мероприятия</span>
        </button>
        
        <button 
          className="header-btn primary"
          onClick={onCreateEventClick}
        >
          <i className="fas fa-plus"></i>
          <span className="header-text">Создать мероприятие</span>
        </button>
        
        <Notifications />
        
        <div className="profile-container" ref={profileRef}>
          <div 
            className="header-icon" 
            onClick={() => setProfileDropdownOpen(!profileDropdownOpen)}
          >
            <i className="fas fa-user"></i>
          </div>
          
          {profileDropdownOpen && (
            <div className="dropdown profile-dropdown">
              <div className="dropdown-header">{user?.name || "Пользователь"}</div>
              <div 
                className="dropdown-item"
                onClick={onMyEventsClick}
              >
                <i className="fas fa-calendar-check"></i>
                Мои мероприятия
              </div>
              <div className="dropdown-item">
                <i className="fas fa-cog"></i>
                Настройки
              </div>
              <div className="dropdown-item">
                <i className="fas fa-headset"></i>
                Обратиться к администратору
              </div>
              <div className="dropdown-item" onClick={handleLogout}>
                <i className="fas fa-sign-out-alt"></i>
                Выйти
              </div>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;

.\src\components\ui\Notification.jsx

import { useState, useEffect } from 'react';
import { useAppContext } from '../../context/AppContext'; // Исправлен импорт
import NotificationModal from './NotificationModal';

const NotificationBell = () => {
  const {
    notifications = [],
    markNotificationAsRead
  } = useAppContext();
  
  const [unreadCount, setUnreadCount] = useState(0);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    setUnreadCount(notifications.filter(n => !n.read).length);
  }, [notifications]);

  const handleBellClick = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const handleNotificationClick = (notification) => {
    if (!notification.read) {
      markNotificationAsRead(notification.id);
    }
    setIsDropdownOpen(false);
  };

  const handleCreateNotification = () => {
    setIsDropdownOpen(false);
    setIsModalOpen(true);
  };

  return (
    <div className="notification-container">
      <div className="header-icon" onClick={handleBellClick}>
        <i className="fas fa-bell"></i>
        {unreadCount > 0 && (
          <div className="notification-count">{unreadCount}</div>
        )}
      </div>

      {isDropdownOpen && (
        <div className="dropdown notification-dropdown">
          <div className="dropdown-header">Уведомления</div>
          
          {notifications.length === 0 ? (
            <div className="dropdown-item">Нет уведомлений</div>
          ) : (
            <>
              {notifications.slice(0, 5).map(notification => (
                <div 
                  key={notification.id} 
                  className={`dropdown-item ${notification.read ? '' : 'unread'}`}
                  onClick={() => handleNotificationClick(notification)}
                >
                  <i className={`fas fa-${
                    notification.type === 'new' ? 'calendar-plus' : 
                    notification.type === 'change' ? 'edit' : 
                    notification.type === 'complete' ? 'check-circle' : 'info-circle'
                  }`}></i>
                  {notification.message}
                </div>
              ))}
            </>
          )}
          
          <div 
            className="dropdown-item" 
            onClick={handleCreateNotification}
          >
            <i className="fas fa-plus"></i>
            Создать уведомление
          </div>
        </div>
      )}

      {isModalOpen && (
        <NotificationModal onClose={() => setIsModalOpen(false)} />
      )}
    </div>
  );
};

export default NotificationBell;

.\src\components\ui\NotificationModal.jsx

// src/components/notifications/NotificationModal.jsx
import { useState } from 'react';
import { useEvents } from '../../context/EventContext';
import Modal from './Modal';
import Button from './Button';

const NotificationModal = ({ onClose }) => {
  const { events, sendEventNotification } = useEvents();
  const [formData, setFormData] = useState({
    eventId: '',
    template: 'change',
    content: '',
    recipients: 'all'
  });

  const templates = {
    change: 'Изменение времени: Мероприятие "[Название]" перенесено на [Дата] [Время]',
    new: 'Новое мероприятие: Приглашаем на [Название мероприятия] [Дата] [Время]',
    reminder: 'Напоминание: Завтра в [Время] состоится мероприятие "[Название]"'
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
      content: name === 'template' ? templates[value] : prev.content
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await sendEventNotification(
      formData.eventId,
      formData.content,
      formData.recipients
    );
    onClose();
  };

  return (
    <Modal isOpen={true} onClose={onClose} title="Создать уведомление">
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label className="form-label">Выберите мероприятие</label>
          <select
            name="eventId"
            value={formData.eventId}
            onChange={handleChange}
            className="form-control"
            required
          >
            <option value="">Выберите мероприятие</option>
            {events.future.map(event => (
              <option key={event.id} value={event.id}>
                {event.title}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label className="form-label">Шаблон уведомления</label>
          <select
            name="template"
            value={formData.template}
            onChange={handleChange}
            className="form-control"
          >
            <option value="change">Изменение деталей</option>
            <option value="new">Новое мероприятие</option>
            <option value="reminder">Напоминание</option>
          </select>
        </div>

        <div className="form-group">
          <label className="form-label">Текст уведомления</label>
          <textarea
            name="content"
            value={formData.content}
            onChange={handleChange}
            className="form-control"
            rows="4"
            required
          />
        </div>

        <div className="form-group">
          <label className="form-label">Получатели</label>
          <select
            name="recipients"
            value={formData.recipients}
            onChange={handleChange}
            className="form-control"
          >
            <option value="all">Все участники</option>
            <option value="confirmed">Только подтвердившие</option>
            <option value="pending">Только ожидающие подтверждения</option>
          </select>
        </div>

        <div className="editor-actions">
          <Button type="button" onClick={onClose}>Отмена</Button>
          <Button type="submit" primary>Отправить уведомление</Button>
        </div>
      </form>
    </Modal>
  );
};

export default NotificationModal;


