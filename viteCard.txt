src\assets\styles\global.css

/* Баннер мероприятий */
.banner {
  padding: 25px 5%;
  position: relative;
  height: 380px;
  overflow: hidden;
  border-radius: var(--radius);
  margin: 0 5%;
}

.banner-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: cover;
  background-position: center;
  border-radius: var(--radius);
  display: flex;
  align-items: flex-end;
  opacity: 0;
  transition: all 0.5s;
}

.banner-slide.active {
  opacity: 1;
}

.banner-content {
  background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
  width: 100%;
  padding: 25px;
  color: white;
  border-radius: 0 0 var(--radius) var(--radius);
}

.banner-title {
  font-size: 28px;
  margin-bottom: 8px;
  font-weight: 600;
  line-height: 1.3;
  animation: fadeInUp 0.8s ease;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.banner-text {
  font-size: 16px;
  margin-bottom: 18px;
  max-width: 600px;
  opacity: 0.9;
  animation: fadeInUp 0.8s 0.2s ease both;
}

.banner-btn {
  padding: 11px 28px;
  background: var(--white);
  border: none;
  border-radius: 28px;
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  color: var(--primary);
  animation: fadeInUp 0.8s 0.4s ease both;
}

.banner-btn:hover {
  background: var(--light);
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

.banner-nav {
  position: absolute;
  bottom: 18px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 8px;
  z-index: 10;
}

.banner-dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.5);
  cursor: pointer;
  transition: var(--transition);
}

.banner-dot.active {
  background: white;
  transform: scale(1.3);
}

.banner-arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: 40px;
  height: 40px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary);
  cursor: pointer;
  transition: var(--transition);
  opacity: 0;
  z-index: 20;
  box-shadow: var(--shadow);
}

.banner:hover .banner-arrow {
  opacity: 1;
}

.banner-arrow:hover {
  background: var(--white);
  transform: translateY(-50%) scale(1.1);
}

.prev-arrow {
  left: 20px;
}

.next-arrow {
  right: 20px;
}

/* Карточки */
.card {
  background: var(--white);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  overflow: hidden;
  transition: var(--transition);
  border: 1px solid var(--border);
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-hover);
  border-color: var(--accent);
}

/* Формы */
.form-group {
  margin-bottom: 20px;
}

.form-label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--primary);
}

.form-control {
  width: 100%;
  padding: 12px 16px;
  border: 1px solid var(--border);
  border-radius: var(--radius-sm);
  font-size: 15px;
  background: var(--light-gray);
  transition: var(--transition);
}

.form-control:focus {
  outline: none;
  border-color: var(--accent);
  box-shadow: 0 0 0 3px rgba(75, 134, 180, 0.15);
}

textarea.form-control {
  min-height: 120px;
  resize: vertical;
}

/* Модальные окна */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(5px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
  opacity: 0;
  visibility: hidden;
  transition: var(--transition);
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal {
  background: var(--white);
  border-radius: var(--radius);
  width: 90%;
  max-width: 750px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
  position: relative;
  border: 1px solid var(--border);
  animation: scaleIn 0.3s ease;
}

@keyframes scaleIn {
  from {
    transform: scale(0.9);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

.close-modal {
  position: absolute;
  top: 18px;
  right: 18px;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  transition: var(--transition);
  border: 1px solid var(--border);
}

.close-modal:hover {
  background: #e0e0e0;
  transform: rotate(90deg);
}

.modal-content {
  padding: 35px;
}

/* Модальное окно мероприятия */
.event-modal-wide .modal {
  max-width: 900px;
}

.event-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 22px;
  flex-wrap: wrap;
  gap: 15px;
}

.event-category {
  display: inline-block;
  padding: 7px 18px;
  border-radius: 28px;
  font-size: 14px;
  font-weight: 600;
  color: white;
}

.event-title {
  font-size: 28px;
  color: var(--primary);
  margin: 12px 0;
  line-height: 1.3;
  width: 100%;
}

.event-id {
  font-size: 14px;
  color: var(--gray);
  margin-top: -10px;
  margin-bottom: 10px;
  font-weight: 500;
}

.event-tabs {
  display: flex;
  gap: 10px;
  margin-bottom: 22px;
  border-bottom: 1px solid var(--border);
  padding-bottom: 10px;
}

.event-tab {
  padding: 10px 20px;
  background: var(--light);
  border-radius: 28px;
  cursor: pointer;
  font-size: 14px;
  border: 1px solid transparent;
  transition: var(--transition);
}

.event-tab.active {
  background: var(--accent);
  color: white;
  border-color: var(--accent);
}

.event-content {
  margin-top: 20px;
}

.event-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 25px;
  margin-bottom: 22px;
}

.event-meta-item {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 16px;
}

.event-meta-item i {
  font-size: 22px;
  color: var(--accent);
}

.event-description {
  font-size: 16px;
  line-height: 1.7;
  margin-bottom: 28px;
  color: var(--text);
}

.event-participants {
  background: var(--light);
  border-radius: var(--radius-sm);
  padding: 18px;
  margin-bottom: 28px;
  border: 1px solid var(--border);
}

.participants-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 14px;
  font-size: 16px;
  color: var(--primary);
  flex-wrap: wrap;
  gap: 10px;
}

.progress-container {
  width: 100%;
  background: #e0e0e0;
  border-radius: 10px;
  overflow: hidden;
  height: 10px;
}

.progress-bar {
  height: 100%;
  background: linear-gradient(to right, var(--accent), var(--secondary));
  width: 70%;
  transition: width 0.5s ease;
}

.event-action {
  width: 100%;
  padding: 16px;
  background: linear-gradient(to right, var(--primary), var(--secondary));
  color: white;
  border: none;
  border-radius: var(--radius-sm);
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.event-action:hover {
  transform: translateY(-2px);
  box-shadow: 0 7px 15px rgba(42, 77, 105, 0.4);
}

.event-action.participated {
  background: var(--success);
}

/* Карточка мероприятия */
.event-card {
  border-radius: var(--radius);
  overflow: hidden;
  box-shadow: var(--shadow);
  transition: var(--transition);
  background: var(--white);
  border: 1px solid var(--border);
}

.event-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-hover);
  border-color: var(--accent);
}

.event-card-image {
  height: 170px;
  background-size: cover;
  background-position: center;
  transition: transform 0.5s ease;
}

.event-card:hover .event-card-image {
  transform: scale(1.05);
}

.event-card-content {
  padding: 18px;
}

.event-card-title {
  font-size: 17px;
  margin-bottom: 10px;
  color: var(--primary);
  line-height: 1.4;
  transition: var(--transition);
}

.event-card:hover .event-card-title {
  color: var(--accent);
}

.event-card-meta {
  display: flex;
  flex-direction: column;
  gap: 6px;
  margin-bottom: 14px;
  font-size: 13px;
  color: var(--gray);
}

.event-card-meta span {
  display: flex;
  align-items: center;
  gap: 5px;
}

.event-card-status {
  padding: 4px 10px;
  border-radius: 28px;
  font-size: 12px;
  font-weight: 500;
  display: inline-block;
}

.status-upcoming {
  background: rgba(76, 175, 80, 0.15);
  color: #2e7d32;
}

.status-past {
  background: rgba(158, 158, 158, 0.15);
  color: #424242;
}

.event-card-actions {
  margin-top: 10px;
  display: flex;
  gap: 10px;
}

.edit-btn {
  padding: 6px 12px;
  background: rgba(75, 134, 180, 0.15);
  color: var(--accent);
  border-radius: 20px;
  font-size: 13px;
  font-weight: 500;
  transition: var(--transition);
}

.edit-btn:hover {
  background: rgba(75, 134, 180, 0.3);
}

/* Страница мероприятий */
.events-page {
  padding: 30px 5%;
}

.events-tabs {
  display: flex;
  border-bottom: 2px solid var(--border);
  margin-bottom: 22px;
}

.events-tab {
  padding: 14px 28px;
  cursor: pointer;
  font-weight: 500;
  color: var(--gray);
  transition: var(--transition);
  position: relative;
  font-size: 15px;
}

.events-tab.active {
  color: var(--primary);
  font-weight: 600;
}

.events-tab.active::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--primary);
}

.events-tab:hover:not(.active) {
  background: rgba(75, 134, 180, 0.08);
}

.events-content {
  margin-top: 20px;
}

.events-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 22px;
}

.create-event-btn {
  margin-top: 30px;
  text-align: center;
}


.\src\components\sections\Banner.jsx

import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

const Banner = ({ events = [] }) => {
  const [currentSlide, setCurrentSlide] = useState(0);
  
  useEffect(() => {
    if (events.length === 0) return;
    
    const interval = setInterval(() => {
      setCurrentSlide(prev => (prev + 1) % events.length);
    }, 5000);
    
    return () => clearInterval(interval);
  }, [events.length]);

  if (events.length === 0) return null;

  return (
    <section className="banner">
      {events.map((event, index) => (
        <div 
          key={event.id}
          className={`banner-slide ${index === currentSlide ? 'active' : ''}`}
          style={{ backgroundImage: `linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(${event.image || '/placeholder.jpg'})` }}
        >
          <div className="banner-content">
            <h2 className="banner-title">{event.title}</h2>
            <p className="banner-text">{event.description?.substring(0, 100) || 'Описание мероприятия'}...</p>
            <Link to={`/events/${event.id}`} className="banner-btn">
              Узнать подробности
            </Link>
          </div>
        </div>
      ))}
      
      <div className="banner-nav">
        {events.map((_, index) => (
          <div 
            key={index}
            className={`banner-dot ${index === currentSlide ? 'active' : ''}`}
            onClick={() => setCurrentSlide(index)}
          ></div>
        ))}
      </div>
      
      <button 
        className="banner-arrow prev-arrow"
        onClick={() => setCurrentSlide(prev => (prev - 1 + events.length) % events.length)}
      >
        <i className="fas fa-chevron-left"></i>
      </button>
      
      <button 
        className="banner-arrow next-arrow"
        onClick={() => setCurrentSlide(prev => (prev + 1) % events.length)}
      >
        <i className="fas fa-chevron-right"></i>
      </button>
    </section>
  );
};

export default Banner;

.\src\components\events\EventModal.jsx

import { useState } from 'react';
import { useAppContext } from '../../context/AppContext';

const CreateEventModal = ({ isOpen, onClose }) => {
  const { createEvent } = useAppContext();
  const [activeTab, setActiveTab] = useState('basic');
  const [formData, setFormData] = useState({
    title: '',
    category: 'Общественное мероприятие',
    date: '',
    time: '',
    duration: '2 часа',
    location: '',
    description: '',
    maxParticipants: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const event = createEvent(formData);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal">
        <div className="close-modal" onClick={onClose}>
          <i className="fas fa-times"></i>
        </div>
        <div className="modal-content">
          <div className="event-editor">
            <div className="editor-header">
              <h2 className="editor-title">Создание мероприятия</h2>
              <div className="editor-tabs">
                <button 
                  className={`editor-tab ${activeTab === 'basic' ? 'active' : ''}`}
                  onClick={() => setActiveTab('basic')}
                >
                  Основное
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'participants' ? 'active' : ''}`}
                  onClick={() => setActiveTab('participants')}
                >
                  Участники
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'notifications' ? 'active' : ''}`}
                  onClick={() => setActiveTab('notifications')}
                >
                  Уведомления
                </button>
              </div>
            </div>
            
            <form onSubmit={handleSubmit}>
              {activeTab === 'basic' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Информация о мероприятии</h3>
                  
                  <div className="form-group">
                    <label className="form-label">Название мероприятия</label>
                    <input
                      type="text"
                      name="title"
                      value={formData.title}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Введите название"
                    />
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Категория</label>
                        <select
                          name="category"
                          value={formData.category}
                          onChange={handleChange}
                          className="form-control"
                          required
                        >
                          <option>Концерт</option>
                          <option>Внутривузовская активность</option>
                          <option>Общественное мероприятие</option>
                          <option>Соревнование</option>
                          <option>Лекция</option>
                          <option>Мастер-класс</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Дата</label>
                        <input
                          type="date"
                          name="date"
                          value={formData.date}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Время начала</label>
                        <input
                          type="time"
                          name="time"
                          value={formData.time}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Продолжительность</label>
                        <input
                          type="text"
                          name="duration"
                          value={formData.duration}
                          onChange={handleChange}
                          className="form-control"
                          placeholder="Например, 2 часа"
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Место проведения</label>
                    <input
                      type="text"
                      name="location"
                      value={formData.location}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Аудитория 101, ул. Станке Димитрова, 3"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Описание</label>
                    <textarea
                      name="description"
                      value={formData.description}
                      onChange={handleChange}
                      className="form-control"
                      rows="4"
                      placeholder="Подробное описание мероприятия"
                      required
                    ></textarea>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Максимальное количество участников</label>
                    <input
                      type="number"
                      name="maxParticipants"
                      value={formData.maxParticipants}
                      onChange={handleChange}
                      className="form-control"
                      placeholder="0 - без ограничений"
                    />
                  </div>
                </div>
              )}
              
              {activeTab === 'participants' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Управление участниками</h3>
                  <p>Функционал участников будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              {activeTab === 'notifications' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Уведомления участникам</h3>
                  <p>Функционал уведомлений будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              <div className="editor-actions">
                <button 
                  type="button" 
                  className="editor-btn btn-cancel"
                  onClick={onClose}
                >
                  Отмена
                </button>
                <button 
                  type="submit" 
                  className="editor-btn btn-save"
                >
                  Сохранить мероприятие
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateEventModal;

src\components\events\EventCard.jsx

import { useAppContext } from '../../context/AppContext';

const EventCard = ({ event, showActions = false, onEdit, onComplete }) => {
  const { user } = useAppContext();
  const isPast = event.isPast;
  const hasImages = event.images && event.images.length > 0;

  return (
    <div className="event-card">
      {hasImages && (
        <div 
          className="event-card-image" 
          style={{ backgroundImage: `url(${event.images[0]})` }}
        />
      )}
      
      <div className="event-card-content">
        <h3 className="event-card-title">{event.title}</h3>
        
        <div className="event-card-meta">
          <span><i className="fas fa-calendar"></i> {event.date}</span>
          <span><i className="fas fa-clock"></i> {event.time}</span>
          <span><i className="fas fa-map-marker-alt"></i> {event.location}</span>
        </div>
        
        <span className={`event-card-status ${isPast ? 'status-past' : 'status-upcoming'}`}>
          {isPast ? 'Завершено' : 'Запланировано'}
        </span>
        
        {showActions && !isPast && user?.role === 'teacher' && (
          <div className="event-card-actions">
            <button 
              className="edit-btn" 
              onClick={(e) => {
                e.stopPropagation();
                onEdit && onEdit(event);
              }}
            >
              Редактировать
            </button>
            <button 
              className="edit-btn" 
              onClick={(e) => {
                e.stopPropagation();
                onComplete && onComplete(event);
              }}
              style={{ marginLeft: '8px' }}
            >
              Завершить
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default EventCard;

.\src\components\sections\NewsSection.jsx

import EventCard from '../events/EventCard';

const NewsSection = ({ events = [] }) => {
  if (events.length === 0) return null;

  return (
    <section className="news-section">
      <h2 className="section-title">
        <i className="fas fa-newspaper"></i> Новостная лента
      </h2>
      
      <div className="news-grid">
        {events.map(event => (
          <div key={event.id} className="news-card">
            {event.images && event.images.length > 0 && (
              <div 
                className="news-image" 
                style={{ backgroundImage: `url(${event.images[0]})` }}
              ></div>
            )}
            <div className="news-content">
              <h3 className="news-title">{event.title}</h3>
              <div className="news-meta">
                <span><i className="fas fa-user"></i> {event.responsible || "Организатор"}</span>
                <span><i className="fas fa-calendar"></i> {event.date}</span>
              </div>
              <p className="news-excerpt">
                {event.report?.comment?.slice(0, 100) || 'Отчет о мероприятии...'}
              </p>
              <a className="news-link">
                Читать подробнее <i className="fas fa-arrow-right"></i>
              </a>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
};

export default NewsSection;

.\src\App.jsx

import { useState } from 'react';
import { AppProvider } from './context/AppContext';
import Header from './components/layout/Header';
import CategoryFilter from './components/events/CategoryFilter';
import Banner from './components/sections/Banner';
import CalendarSection from './components/sections/CalendarSection';
import NewsSection from './components/sections/NewsSection';
import Footer from './components/layout/Footer';
import MyEventsPage from './pages/MyEventsPage';
import CreateEventModal from './components/events/CreateEventModal';

function App() {
  const [activePage, setActivePage] = useState('home');
  const [createModalOpen, setCreateModalOpen] = useState(false);
  const [events] = useState([
    {
      id: 1,
      title: "День открытых дверей БГИТУ",
      category: "Общественное мероприятие",
      date: "2025-07-15",
      time: "10:00 - 14:00",
      location: "Главный корпус, ауд. 301",
      description: "Приглашаем абитуриентов и их родителей на ежегодный День открытых дверей...",
      maxParticipants: 150,
      currentParticipants: 98,
      isPast: false,
      images: [],
      report: null
    },
    {
      id: 101,
      title: "Уборка Центрального парка",
      category: "Волонтерская активность",
      date: "2025-07-10",
      time: "09:00 - 13:00",
      location: "Центральный парк, Брянск",
      description: "Волонтеры БГИТУ провели масштабную уборку Центрального парка.",
      isPast: true,
      images: [
        'https://images.unsplash.com/photo-1523580494863-6f3031224c94?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
      ],
      report: {
        comment: "За 4 часа было собрано более 50 мешков мусора...",
        tasks: ["Сбор мусора", "Покраска скамеек"]
      }
    }
  ]);

  const renderContent = () => {
    if (activePage === 'my-events') {
      return <MyEventsPage />;
    }
    
    return (
      <>
        <CategoryFilter />
        <Banner events={events} />
        <CalendarSection events={events} />
        <NewsSection events={events.filter(event => event.isPast && event.report)} />
      </>
    );
  };

  return (
    <AppProvider>
      <div className="app">
        <Header 
          onMyEventsClick={() => setActivePage('my-events')}
          onHomeClick={() => setActivePage('home')}
          onCreateEventClick={() => setCreateModalOpen(true)}
        />
        
        <main>
          {renderContent()}
        </main>
        
        <Footer />
        
        <CreateEventModal 
          isOpen={createModalOpen}
          onClose={() => setCreateModalOpen(false)}
        />
      </div>
    </AppProvider>
  );
}

export default App;


.\src\routes\AppRouter.jsx

import { BrowserRouter, Routes, Route } from 'react-router-dom'
import Layout from '../components/layout/Layout'
import Home from '../pages/Home'
import Events from '../pages/Events'
import Login from '../pages/Login'
import Profile from '../pages/Profile'

const AppRouter = () => {
  return (
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="events" element={<Events />} />
          <Route path="login" element={<Login />} />
          <Route path="profile" element={<Profile />} />
        </Route>
      </Routes>
  )
}

export default AppRouter

.\src\store\authStore.js

// src/store/authStore.js
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { login, logout, getUserProfile } from '../api/auth';

const useAuthStore = create(
  persist(
    (set) => ({
      user: null,
      loading: false,
      error: null,
      
      login: async (credentials) => {
        set({ loading: true, error: null });
        try {
          const user = await login(credentials);
          set({ user, loading: false });
          return user;
        } catch (error) {
          set({ error: error.message, loading: false });
          throw error;
        }
      },
      
      logout: async () => {
        await logout();
        set({ user: null });
      },
      
      fetchProfile: async () => {
        set({ loading: true });
        try {
          const user = await getUserProfile();
          set({ user, loading: false });
          return user;
        } catch (error) {
          set({ error: error.message, loading: false });
          throw error;
        }
      },
      
      updateProfile: async (profileData) => {
        set({ loading: true });
        try {
          // Здесь будет вызов API для обновления профиля
          set(state => ({ 
            user: { ...state.user, ...profileData },
            loading: false 
          }));
        } catch (error) {
          set({ error: error.message, loading: false });
          throw error;
        }
      }
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({ user: state.user }),
    }
  )
);

export default useAuthStore;

