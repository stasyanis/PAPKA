base_dir = C:\Users\stask\Desktop\SOBAKI\vite\PAPKA

.\src\api\auth.js

import axios from 'axios'

const API_URL = import.meta.env.VITE_API_URL

export const login = async (credentials) => {
  const response = await axios.post(`${API_URL}/auth/login`, credentials)
  return response.data
}

export const logout = async () => {
  await axios.post(`${API_URL}/auth/logout`)
}

export const getUserProfile = async () => {
  const response = await axios.get(`${API_URL}/auth/profile`)
  return response.data
}

.\src\api\events.js

import axios from 'axios'

const API_URL = import.meta.env.VITE_API_URL

export const fetchEvents = async () => {
  const response = await axios.get(`${API_URL}/events`)
  return response.data
}

export const fetchEventById = async (id) => {
  const response = await axios.get(`${API_URL}/events/${id}`)
  return response.data
}

export const createEvent = async (eventData) => {
  const response = await axios.post(`${API_URL}/events`, eventData)
  return response.data
}

export const updateEvent = async (id, updates) => {
  const response = await axios.put(`${API_URL}/events/${id}`, updates)
  return response.data
}

export const deleteEvent = async (id) => {
  await axios.delete(`${API_URL}/events/${id}`)
}

export const completeEvent = async (id, reportData) => {
  const response = await axios.post(`${API_URL}/events/${id}/complete`, reportData)
  return response.data
}

export const registerForEvent = async (eventId) => {
  const response = await axios.post(`${API_URL}/events/${eventId}/register`)
  return response.data
}

export const sendNotification = async (eventId, notificationData) => {
  const response = await axios.post(`${API_URL}/events/${eventId}/notify`, notificationData)
  return response.data
}

.\src\api\index.js

// src/api/index.js
export * from './auth';
export * from './events';

src\assets\styles\global.css



/* ======================== */
/* ОБЩИЕ СТИЛИ И ПЕРЕМЕННЫЕ */
/* ======================== */
:root {
  --primary: #1a3a5a;
  --secondary: #2a4d69;
  --accent: #4b86b4;
  --light: #f0f7ff;
  --light-gray: #f8f9fa;
  --dark: #333;
  --white: #ffffff;
  --success: #4caf50;
  --danger: #f44336;
  --warning: #ff9800;
  --text: #333;
  --gray: #777;
  --bg: #f8f9fa;
  --concert: #e91e63;
  --activity: #9c27b0;
  --public: #3f51b5;
  --competition: #009688;
  --border: #e0e0e0;
  --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  --shadow-hover: 0 8px 20px rgba(0, 0, 0, 0.12);
  --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  --radius: 12px;
  --radius-sm: 8px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
  background-color: var(--light-gray);
  color: var(--text);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  line-height: 1.6;
}

a {
  text-decoration: none;
  color: inherit;
}

button {
  cursor: pointer;
  border: none;
  background: none;
}

input, textarea, select {
  font-family: inherit;
  font-size: inherit;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

/* ================= */
/* КОМПОНЕНТЫ ИНТЕРФЕЙСА */
/* ================= */

/* Кнопки */
.btn {
  padding: 10px 20px;
  border-radius: var(--radius-sm);
  font-size: 15px;
  font-weight: 500;
  transition: var(--transition);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.btn-primary {
  background: linear-gradient(to right, var(--primary), var(--secondary));
  color: var(--white);
  box-shadow: var(--shadow);
}

.btn-primary:hover {
  background: linear-gradient(to right, #152c46, #223d5a);
  transform: translateY(-3px);
  box-shadow: var(--shadow-hover);
}

.btn-secondary {
  background: var(--light);
  border: 1px solid var(--border);
  color: var(--primary);
}

.btn-secondary:hover {
  background: #e6f0ff;
  border-color: var(--accent);
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

.btn-success {
  background: var(--success);
  color: var(--white);
}

.btn-danger {
  background: var(--danger);
  color: var(--white);
}

.btn-icon {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  padding: 0;
  justify-content: center;
}

.btn-full-width {
  width: 100%;
}

.btn-disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-badge {
  background: var(--danger);
  color: white;
  font-size: 11px;
  padding: 2px 6px;
  border-radius: 20px;
  margin-left: 5px;
}

/* Формы */
.form-group {
  margin-bottom: 20px;
}

.form-label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--primary);
}

.form-control {
  width: 100%;
  padding: 12px 16px;
  border: 1px solid var(--border);
  border-radius: var(--radius-sm);
  font-size: 15px;
  background: var(--light-gray);
  transition: var(--transition);
}

.form-control:focus {
  outline: none;
  border-color: var(--accent);
  box-shadow: 0 0 0 3px rgba(75, 134, 180, 0.15);
}

textarea.form-control {
  min-height: 120px;
  resize: vertical;
}

/* Карточки */
.card {
  background: var(--white);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  overflow: hidden;
  transition: var(--transition);
  border: 1px solid var(--border);
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-hover);
  border-color: var(--accent);
}

/* ================= */
/* КОМПОНЕНТЫ ПРИЛОЖЕНИЯ */
/* ================= */

/* Шапка */
.header {
  background: var(--white);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  padding: 12px 5%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: sticky;
  top: 0;
  z-index: 1000;
  animation: slideDown 0.5s ease;
}

@keyframes slideDown {
  from { transform: translateY(-100%); }
  to { transform: translateY(0); }
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
}

.logo {
  width: 46px;
  height: 46px;
  background: linear-gradient(135deg, var(--primary), var(--secondary));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-size: 22px;
  box-shadow: var(--shadow);
  transition: var(--transition);
}

.logo:hover {
  transform: rotate(15deg);
}

.logo-text {
  font-size: 20px;
  font-weight: 600;
  color: var(--primary);
}

.logo-text span {
  color: var(--accent);
  transition: var(--transition);
}

.search-container {
  flex: 1;
  max-width: 600px;
  margin: 0 25px;
  position: relative;
}

.search-box {
  width: 100%;
  padding: 12px 18px;
  border: 1px solid var(--border);
  border-radius: 28px;
  font-size: 15px;
  transition: var(--transition);
  padding-left: 45px;
  background: var(--light-gray);
}

.search-box:focus {
  outline: none;
  border-color: var(--accent);
  box-shadow: 0 0 0 3px rgba(75, 134, 180, 0.15);
}

.search-icon {
  position: absolute;
  left: 18px;
  top: 50%;
  transform: translateY(-50%);
  color: #999;
  font-size: 16px;
}

.header-actions {
  display: flex;
  align-items: center;
  gap: 16px;
}

.notification-container, 
.profile-container {
  position: relative;
  cursor: pointer;
}

.header-icon {
  width: 38px;
  height: 38px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  transition: var(--transition);
  border: 1px solid var(--border);
}

.header-icon:hover {
  background: #e6f0ff;
  border-color: var(--accent);
  transform: scale(1.05);
}

.notification-count {
  position: absolute;
  top: -5px;
  right: -5px;
  background: var(--danger);
  color: white;
  font-size: 11px;
  font-weight: bold;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

/* Выпадающие меню */
.dropdown {
  position: absolute;
  top: 54px;
  right: 0;
  width: 260px;
  background: var(--white);
  border-radius: var(--radius);
  box-shadow: var(--shadow-hover);
  z-index: 1000; /* Увеличен z-index, чтобы dropdown был поверх других элементов */
  opacity: 0;
  visibility: hidden;
  transform: translateY(-10px);
  transition: var(--transition);
  border: 1px solid var(--border);
}

.dropdown.active {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.dropdown-header {
  padding: 14px;
  border-bottom: 1px solid var(--border);
  font-weight: 600;
  color: var(--primary);
  background: var(--light);
  border-radius: var(--radius) var(--radius) 0 0;
}

.dropdown-item {
  padding: 12px 14px;
  display: flex;
  align-items: center;
  gap: 10px;
  transition: var(--transition);
  cursor: pointer;
  font-size: 15px;
}

.dropdown-item:hover {
  background: var(--light);
  transform: translateX(5px);
}

.dropdown-item i {
  width: 28px;
  text-align: center;
  color: var(--accent);
}

/* Категории мероприятий */
.categories {
  padding: 20px 5%;
  background: var(--white);
  animation: fadeIn 0.8s ease;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.section-title {
  font-size: 22px;
  color: var(--primary);
  margin-bottom: 18px;
  display: flex;
  align-items: center;
  gap: 10px;
}

.categories-list {
  display: flex;
  gap: 12px;
  overflow-x: auto;
  padding: 8px 0;
  scrollbar-width: thin;
  scrollbar-color: var(--accent) transparent;
}

.category {
  padding: 9px 22px;
  background: var(--light);
  border-radius: 28px;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition);
  white-space: nowrap;
  font-size: 14px;
  border: 1px solid var(--border);
}

.category:hover, 
.category.active {
  background: var(--accent);
  color: white;
  border-color: var(--accent);
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

/* Баннер мероприятий */
.banner {
  padding: 25px 5%;
  position: relative;
  height: 380px;
  overflow: hidden;
  border-radius: var(--radius);
  margin: 0 5%;
}

.banner-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: cover;
  background-position: center;
  border-radius: var(--radius);
  display: flex;
  align-items: flex-end;
  opacity: 0;
  transition: all 0.5s;
}

.banner-slide.active {
  opacity: 1;
}

.banner-content {
  background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
  width: 100%;
  padding: 25px;
  color: white;
  border-radius: 0 0 var(--radius) var(--radius);
}

.banner-title {
  font-size: 28px;
  margin-bottom: 8px;
  font-weight: 600;
  line-height: 1.3;
  animation: fadeInUp 0.8s ease;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.banner-text {
  font-size: 16px;
  margin-bottom: 18px;
  max-width: 600px;
  opacity: 0.9;
  animation: fadeInUp 0.8s 0.2s ease both;
}

.banner-btn {
  padding: 11px 28px;
  background: var(--white);
  border: none;
  border-radius: 28px;
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  color: var(--primary);
  animation: fadeInUp 0.8s 0.4s ease both;
}

.banner-btn:hover {
  background: var(--light);
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

.banner-nav {
  position: absolute;
  bottom: 18px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 8px;
  z-index: 10;
}

.banner-dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.5);
  cursor: pointer;
  transition: var(--transition);
}

.banner-dot.active {
  background: white;
  transform: scale(1.3);
}

.banner-arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: 40px;
  height: 40px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary);
  cursor: pointer;
  transition: var(--transition);
  opacity: 0;
  z-index: 20;
  box-shadow: var(--shadow);
}

.banner:hover .banner-arrow {
  opacity: 1;
}

.banner-arrow:hover {
  background: var(--white);
  transform: translateY(-50%) scale(1.1);
}

.prev-arrow {
  left: 20px;
}

.next-arrow {
  right: 20px;
}

/* Календарь мероприятий */
.calendar-section {
  padding: 28px 5%;
  background: var(--white);
  margin: 15px 5% 0;
  border-radius: var(--radius);
  animation: fadeIn 0.8s 0.2s ease both;
}

.calendar-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 18px;
}

.calendar-title {
  display: flex;
  align-items: center;
  gap: 10px;
}

.calendar-nav {
  display: flex;
  gap: 8px;
}

.calendar-nav-btn {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: 1px solid var(--border);
  transition: var(--transition);
}

.calendar-nav-btn:hover {
  background: #e6f0ff;
  border-color: var(--accent);
  transform: scale(1.1);
}

.calendar-grid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 8px;
  margin-bottom: 18px;
}

.calendar-day {
  text-align: center;
  padding: 10px;
  font-weight: 600;
  color: var(--gray);
  font-size: 14px;
}

.calendar-cell {
  height: 90px;
  border: 1px solid var(--border);
  border-radius: var(--radius-sm);
  padding: 10px;
  position: relative;
  overflow: hidden;
  cursor: pointer;
  transition: var(--transition);
  background: var(--light-gray);
}

.calendar-cell:hover {
  transform: translateY(-3px);
  box-shadow: var(--shadow);
  border-color: var(--accent);
}

.calendar-cell.has-event {
  background: rgba(75, 134, 180, 0.08);
  border-color: var(--accent);
  animation: pulseCell 3s infinite;
}

@keyframes pulseCell {
  0% { box-shadow: 0 0 0 0 rgba(75, 134, 180, 0.4); }
  70% { box-shadow: 0 0 0 10px rgba(75, 134, 180, 0); }
  100% { box-shadow: 0 0 0 0 rgba(75, 134, 180, 0); }
}

.calendar-date {
  font-size: 13px;
  font-weight: 600;
  margin-bottom: 4px;
}

.calendar-event {
  font-size: 11px;
  background: var(--accent);
  color: white;
  padding: 3px 6px;
  border-radius: 4px;
  display: inline-block;
  margin-bottom: 2px;
}

.view-all-btn {
  display: block;
  width: 100%;
  padding: 14px;
  background: var(--light);
  border: 1px solid var(--border);
  border-radius: var(--radius-sm);
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition);
  text-align: center;
  color: var(--primary);
}

.view-all-btn:hover {
  background: #e6f0ff;
  border-color: var(--accent);
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

/* Новостная лента */
.news-section {
  padding: 28px 5%;
  background: var(--white);
  margin: 15px 5% 0;
  border-radius: var(--radius);
  animation: fadeIn 0.8s 0.4s ease both;
}

.news-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 22px;
  margin-top: 18px;
}

.news-card {
  border-radius: var(--radius);
  overflow: hidden;
  box-shadow: var(--shadow);
  transition: var(--transition);
  background: var(--white);
  border: 1px solid var(--border);
  animation: fadeIn 0.8s ease;
}

.news-card:hover {
  transform: translateY(-8px);
  box-shadow: var(--shadow-hover);
  border-color: var(--accent);
}

.news-image {
  height: 220px;
  background-size: cover;
  background-position: center;
  cursor: pointer;
  transition: transform 0.5s ease;
}

.news-card:hover .news-image {
  transform: scale(1.05);
}

.news-content {
  padding: 18px;
}

.news-title {
  font-size: 18px;
  margin-bottom: 10px;
  color: var(--primary);
  line-height: 1.4;
  transition: var(--transition);
}

.news-card:hover .news-title {
  color: var(--accent);
}

.news-meta {
  display: flex;
  gap: 15px;
  margin-bottom: 12px;
  font-size: 13px;
  color: var(--gray);
  flex-wrap: wrap;
}

.news-meta i {
  margin-right: 5px;
}

.news-excerpt {
  color: var(--text);
  line-height: 1.6;
  margin-bottom: 14px;
  font-size: 14px;
}

.news-link {
  color: var(--accent);
  font-weight: 500;
  text-decoration: none;
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 14px;
  transition: var(--transition);
}

.news-link:hover {
  color: var(--primary);
  transform: translateX(5px);
}

/* Подвал сайта */
footer {
  background: var(--primary);
  color: white;
  padding: 45px 5% 25px;
  margin-top: auto;
  animation: fadeIn 0.8s ease;
}

.footer-grid {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr;
  gap: 35px;
  margin-bottom: 35px;
}

.footer-logo {
  font-size: 22px;
  font-weight: 600;
  margin-bottom: 18px;
}

.footer-about {
  font-size: 15px;
  line-height: 1.7;
  max-width: 500px;
  margin-bottom: 18px;
  opacity: 0.9;
}

.subscribe-form {
  display: flex;
  gap: 10px;
  margin-top: 18px;
}

.subscribe-input {
  flex: 1;
  padding: 11px 14px;
  border: none;
  border-radius: 28px;
  font-size: 15px;
  transition: var(--transition);
}

.subscribe-input:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
}

.subscribe-btn {
  padding: 11px 22px;
  background: var(--accent);
  color: white;
  border: none;
  border-radius: 28px;
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition);
}

.subscribe-btn:hover {
  background: #3a7ca8;
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

.footer-title {
  font-size: 17px;
  margin-bottom: 18px;
  font-weight: 600;
}

.footer-links {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.footer-link {
  color: rgba(255, 255, 255, 0.8);
  text-decoration: none;
  transition: var(--transition);
  font-size: 14px;
}

.footer-link:hover {
  color: white;
  transform: translateX(5px);
}

.footer-bottom {
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  padding-top: 18px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 14px;
}

.copyright {
  color: rgba(255, 255, 255, 0.7);
}

.developer {
  font-weight: 600;
  color: white;
}

/* Модальные окна */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(5px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
  opacity: 0;
  visibility: hidden;
  transition: var(--transition);
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal {
  background: var(--white);
  border-radius: var(--radius);
  width: 90%;
  max-width: 750px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
  position: relative;
  border: 1px solid var(--border);
  animation: scaleIn 0.3s ease;
}

@keyframes scaleIn {
  from {
    transform: scale(0.9);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

.close-modal {
  position: absolute;
  top: 18px;
  right: 18px;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  transition: var(--transition);
  border: 1px solid var(--border);
}

.close-modal:hover {
  background: #e0e0e0;
  transform: rotate(90deg);
}

.modal-content {
  padding: 35px;
}

/* Модальное окно мероприятия */
.event-modal-wide .modal {
  max-width: 900px;
}

.event-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 22px;
  flex-wrap: wrap;
  gap: 15px;
}

.event-category {
  display: inline-block;
  padding: 7px 18px;
  border-radius: 28px;
  font-size: 14px;
  font-weight: 600;
  color: white;
}

.event-title {
  font-size: 28px;
  color: var(--primary);
  margin: 12px 0;
  line-height: 1.3;
  width: 100%;
}

.event-id {
  font-size: 14px;
  color: var(--gray);
  margin-top: -10px;
  margin-bottom: 10px;
  font-weight: 500;
}

.event-tabs {
  display: flex;
  gap: 10px;
  margin-bottom: 22px;
  border-bottom: 1px solid var(--border);
  padding-bottom: 10px;
}

.event-tab {
  padding: 10px 20px;
  background: var(--light);
  border-radius: 28px;
  cursor: pointer;
  font-size: 14px;
  border: 1px solid transparent;
  transition: var(--transition);
}

.event-tab.active {
  background: var(--accent);
  color: white;
  border-color: var(--accent);
}

.event-content {
  margin-top: 20px;
}

.event-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 25px;
  margin-bottom: 22px;
}

.event-meta-item {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 16px;
}

.event-meta-item i {
  font-size: 22px;
  color: var(--accent);
}

.event-description {
  font-size: 16px;
  line-height: 1.7;
  margin-bottom: 28px;
  color: var(--text);
}

.event-participants {
  background: var(--light);
  border-radius: var(--radius-sm);
  padding: 18px;
  margin-bottom: 28px;
  border: 1px solid var(--border);
}

.participants-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 14px;
  font-size: 16px;
  color: var(--primary);
  flex-wrap: wrap;
  gap: 10px;
}

.progress-container {
  width: 100%;
  background: #e0e0e0;
  border-radius: 10px;
  overflow: hidden;
  height: 10px;
}

.progress-bar {
  height: 100%;
  background: linear-gradient(to right, var(--accent), var(--secondary));
  width: 70%;
  transition: width 0.5s ease;
}

.event-action {
  width: 100%;
  padding: 16px;
  background: linear-gradient(to right, var(--primary), var(--secondary));
  color: white;
  border: none;
  border-radius: var(--radius-sm);
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.event-action:hover {
  transform: translateY(-2px);
  box-shadow: 0 7px 15px rgba(42, 77, 105, 0.4);
}

.event-action.participated {
  background: var(--success);
}

/* Участники */
.participant-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid var(--border);
}

.participant-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.participant-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid var(--border);
  overflow: hidden;
}

.participant-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.participant-status {
  padding: 3px 8px;
  border-radius: 20px;
  font-size: 12px;
}

.status-confirmed {
  background: rgba(76, 175, 80, 0.15);
  color: #2e7d32;
}

.status-pending {
  background: rgba(255, 152, 0, 0.15);
  color: #ef6c00;
}

/* Отчет о мероприятии */
.event-report {
  background: var(--light);
  border-radius: var(--radius-sm);
  padding: 18px;
  margin-bottom: 22px;
  border: 1px solid var(--border);
}

.event-gallery {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
  gap: 10px;
  margin-bottom: 18px;
}

.event-gallery img {
  width: 100%;
  height: 140px;
  object-fit: cover;
  border-radius: var(--radius-sm);
  cursor: pointer;
  transition: var(--transition);
}

.event-gallery img:hover {
  transform: scale(1.05);
  box-shadow: var(--shadow);
}

.event-comment {
  font-style: italic;
  border-left: 3px solid var(--accent);
  padding-left: 14px;
  color: var(--text);
  margin: 15px 0;
}

.task-list {
  list-style-type: none;
  padding: 0;
  margin-top: 14px;
}

.task-list li {
  padding: 8px 0;
  border-bottom: 1px solid var(--border);
  display: flex;
  align-items: center;
}

.task-list li:before {
  content: "✓";
  color: var(--success);
  margin-right: 10px;
  font-weight: bold;
}

/* Навигация в модальном окне */
.modal-navigation {
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  display: flex;
  justify-content: space-between;
  pointer-events: none;
  padding: 0 10px;
}

.nav-arrow {
  pointer-events: auto;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--white);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: var(--shadow);
  border: 1px solid var(--border);
  transition: var(--transition);
  z-index: 10;
}

.nav-arrow:hover {
  background: var(--accent);
  color: white;
  border-color: var(--accent);
}

/* Форма мероприятия */
.editor-tabs {
  display: flex;
  gap: 12px;
  margin-bottom: 22px;
  flex-wrap: wrap;
}

.editor-tab {
  padding: 9px 18px;
  background: var(--light);
  border-radius: 28px;
  cursor: pointer;
  font-size: 14px;
  border: 1px solid var(--border);
  transition: var(--transition);
}

.editor-tab.active {
  background: var(--accent);
  color: white;
  border-color: var(--accent);
}

.editor-section {
  margin-bottom: 25px;
}

.editor-section-title {
  font-size: 18px;
  color: var(--primary);
  margin-bottom: 14px;
  padding-bottom: 8px;
  border-bottom: 2px solid var(--light);
}

.editor-actions {
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  margin-top: 25px;
}

/* Карточка мероприятия */
.event-card {
  border-radius: var(--radius);
  overflow: hidden;
  box-shadow: var(--shadow);
  transition: var(--transition);
  background: var(--white);
  border: 1px solid var(--border);
}

.event-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-hover);
  border-color: var(--accent);
}

.event-card-image {
  height: 170px;
  background-size: cover;
  background-position: center;
  transition: transform 0.5s ease;
}

.event-card:hover .event-card-image {
  transform: scale(1.05);
}

.event-card-content {
  padding: 18px;
}

.event-card-title {
  font-size: 17px;
  margin-bottom: 10px;
  color: var(--primary);
  line-height: 1.4;
  transition: var(--transition);
}

.event-card:hover .event-card-title {
  color: var(--accent);
}

.event-card-meta {
  display: flex;
  flex-direction: column;
  gap: 6px;
  margin-bottom: 14px;
  font-size: 13px;
  color: var(--gray);
}

.event-card-meta span {
  display: flex;
  align-items: center;
  gap: 5px;
}

.event-card-status {
  padding: 4px 10px;
  border-radius: 28px;
  font-size: 12px;
  font-weight: 500;
  display: inline-block;
}

.status-upcoming {
  background: rgba(76, 175, 80, 0.15);
  color: #2e7d32;
}

.status-past {
  background: rgba(158, 158, 158, 0.15);
  color: #424242;
}

.event-card-actions {
  margin-top: 10px;
  display: flex;
  gap: 10px;
}

.edit-btn {
  padding: 6px 12px;
  background: rgba(75, 134, 180, 0.15);
  color: var(--accent);
  border-radius: 20px;
  font-size: 13px;
  font-weight: 500;
  transition: var(--transition);
}

.edit-btn:hover {
  background: rgba(75, 134, 180, 0.3);
}

/* Страница мероприятий */
.events-page {
  padding: 30px 5%;
}

.events-tabs {
  display: flex;
  border-bottom: 2px solid var(--border);
  margin-bottom: 22px;
}

.events-tab {
  padding: 14px 28px;
  cursor: pointer;
  font-weight: 500;
  color: var(--gray);
  transition: var(--transition);
  position: relative;
  font-size: 15px;
}

.events-tab.active {
  color: var(--primary);
  font-weight: 600;
}

.events-tab.active::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--primary);
}

.events-tab:hover:not(.active) {
  background: rgba(75, 134, 180, 0.08);
}

.events-content {
  margin-top: 20px;
}

.events-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 22px;
}

.create-event-btn {
  margin-top: 30px;
  text-align: center;
}

/* Страница входа */
.login-container {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--light);
}

.login-card {
  background: var(--white);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  width: 100%;
  max-width: 450px;
  padding: 40px 30px;
}

.login-header {
  text-align: center;
  margin-bottom: 30px;
}

.login-header h2 {
  margin: 15px 0 10px;
  color: var(--primary);
}

.login-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.error-message {
  color: var(--danger);
  background: rgba(244, 67, 54, 0.1);
  padding: 10px;
  border-radius: var(--radius-sm);
  text-align: center;
}

.login-footer {
  margin-top: 20px;
  text-align: center;
  font-size: 14px;
  color: var(--gray);
}

.login-footer a {
  color: var(--accent);
  transition: var(--transition);
}

.login-footer a:hover {
  text-decoration: underline;
}

/* Страница профиля */
.profile-page {
  padding: 30px 5%;
  max-width: 700px;
  margin: 0 auto;
}

.avatar-container {
  display: flex;
  gap: 25px;
  margin-bottom: 30px;
  align-items: center;
}

.avatar-preview {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  background: var(--light);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  border: 3px solid var(--accent);
}

.avatar-preview img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar-preview i {
  font-size: 40px;
  color: var(--gray);
}

.notifications-settings {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 10px;
}

.notifications-settings label {
  display: flex;
  align-items: center;
  gap: 10px;
  cursor: pointer;
}

.form-actions {
  display: flex;
  gap: 15px;
  justify-content: flex-end;
  margin-top: 30px;
}

/* Загрузчик */
.loader {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 300px;
  font-size: 18px;
  color: var(--gray);
}

/* Анимации */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes fadeOut {
  to { opacity: 0; }
}

/* Адаптивность */
@media (max-width: 1100px) {
  .footer-grid {
    grid-template-columns: 1fr 1fr;
  }
}

@media (max-width: 768px) {
  header {
    flex-wrap: wrap;
    gap: 12px;
  }

  .logo-container {
    order: 1;
  }

  .search-container {
    order: 3;
    margin: 12px 0;
    max-width: 100%;
  }

  .header-actions {
    order: 2;
  }

  .footer-grid {
    grid-template-columns: 1fr;
  }

  .banner-title {
    font-size: 22px;
  }

  .banner-text {
    font-size: 14px;
  }

  .calendar-grid {
    grid-template-columns: repeat(2, 1fr);
  }

  .event-title {
    font-size: 24px;
  }

  .event-meta {
    flex-direction: column;
    gap: 12px;
  }

  .form-row {
    flex-direction: column;
    gap: 10px;
  }

  .event-card-content {
    padding: 15px;
  }
}

@media (max-width: 480px) {
  .header-actions .header-text {
    display: none;
  }

  .header-btn {
    padding: 9px;
  }

  .calendar-grid {
    grid-template-columns: 1fr;
  }

  .banner {
    height: 320px;
  }

  .event-header {
    flex-direction: column;
  }

  .event-title {
    font-size: 22px;
  }

  .event-tabs {
    flex-direction: column;
  }
  
  .events-tabs {
    flex-direction: column;
  }
}
/* Добавлено в конец файла */

/* Стили для галереи в модальном окне */
.event-gallery {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 10px;
}

.event-gallery img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: var(--radius-sm);
}

/* Стили для выпадающих меню */
.dropdown {
  position: absolute;
  top: 54px;
  right: 0;
  width: 260px;
  background: var(--white);
  border-radius: var(--radius);
  box-shadow: var(--shadow-hover);
  z-index: 100;
  opacity: 0;
  visibility: hidden;
  transform: translateY(-10px);
  transition: var(--transition);
  border: 1px solid var(--border);
}

.dropdown.active {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

/* Анимации для плавного появления */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

.dropdown {
  animation: fadeIn 0.3s ease forwards;
}

/* Стили для статусов уведомлений */
.unread-notification {
  background-color: rgba(75, 134, 180, 0.1);
  font-weight: 600;
}

/* Улучшение адаптивности */
@media (max-width: 768px) {
  .header-actions .header-text {
    display: none;
  }
  
  .header-btn {
    padding: 8px 12px;
    font-size: 14px;
  }
  
  .logo-text {
    font-size: 18px;
  }
}

@media (max-width: 480px) {
  .logo-container {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .search-container {
    margin: 10px 0;
  }
}


src\assets\styles\variables.css

:root {
    --primary: #1a3a5a;
    --secondary: #2a4d69;
    --accent: #4b86b4;
    --light: #f0f7ff;
    --light-gray: #f8f9fa;
    --dark: #333;
    --white: #ffffff;
    --success: #4caf50;
    --danger: #f44336;
    --warning: #ff9800;
    --text: #333;
    --gray: #777;
    --bg: #f8f9fa;
    --concert: #e91e63;
    --activity: #9c27b0;
    --public: #3f51b5;
    --competition: #009688;
    --border: #e0e0e0;
    --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    --shadow-hover: 0 8px 20px rgba(0, 0, 0, 0.12);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

.\src\components\events\Calendar.jsx

  import { useState, useEffect } from 'react';
  import { 
    startOfMonth, 
    endOfMonth, 
    eachDayOfInterval, 
    isSameMonth, 
    isSameDay,
    format,
    addMonths,
    subMonths
  } from 'date-fns';
  import { ru } from 'date-fns/locale';

  const Calendar = ({ events, onDayClick }) => {
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [days, setDays] = useState([]);

    useEffect(() => {
      const monthStart = startOfMonth(currentMonth);
      const monthEnd = endOfMonth(currentMonth);
      
      const daysInMonth = eachDayOfInterval({
        start: monthStart,
        end: monthEnd
      });

      // Добавляем пустые дни для заполнения сетки
      const firstDayOfWeek = monthStart.getDay();
      const emptyDays = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
      
      setDays([
        ...Array(emptyDays).fill(null),
        ...daysInMonth
      ]);
    }, [currentMonth]);

    const prevMonth = () => {
      setCurrentMonth(subMonths(currentMonth, 1));
    };

    const nextMonth = () => {
      setCurrentMonth(addMonths(currentMonth, 1));
    };

    const getEventsForDay = (day) => {
      if (!day) return [];
      return events.filter(event => 
        isSameDay(new Date(event.date), day)
      );
    };

    const getCategoryColor = (category) => {
      const colors = {
        'Концерт': 'var(--concert)',
        'Внутривузовская активность': 'var(--activity)',
        'Общественное мероприятие': 'var(--public)',
        'Соревнование': 'var(--competition)',
        'Лекция': 'var(--accent)',
        'Мастер-класс': 'var(--warning)'
      };
      return colors[category] || 'var(--accent)';
    };

    return (
      <div className="calendar-section">
        <div className="calendar-header">
          <div className="calendar-title">
            <i className="fas fa-calendar-alt"></i>
            <h2>{format(currentMonth, 'LLLL yyyy', { locale: ru })}</h2>
          </div>
          <div className="calendar-nav">
            <button className="calendar-nav-btn" onClick={prevMonth}>
              <i className="fas fa-chevron-left"></i>
            </button>
            <button className="calendar-nav-btn" onClick={nextMonth}>
              <i className="fas fa-chevron-right"></i>
            </button>
          </div>
        </div>
        
        <div className="calendar-grid">
          {['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'].map(day => (
            <div key={day} className="calendar-day">{day}</div>
          ))}
          
          {days.map((day, index) => {
            const dayEvents = getEventsForDay(day);
            
            return (
              <div 
                key={day ? day.toString() : `empty-${index}`}
                className={`calendar-cell ${dayEvents.length > 0 ? 'has-event' : ''} ${day ? '' : 'empty'}`}
                onClick={() => day && onDayClick(day)}
              >
                {day && (
                  <>
                    <div className="calendar-date">{format(day, 'd')}</div>
                    {dayEvents.slice(0, 2).map(event => (
                      <div 
                        key={event.id} 
                        className="calendar-event"
                        style={{ backgroundColor: getCategoryColor(event.category) }}
                      >
                        {event.category}
                      </div>
                    ))}
                    {dayEvents.length > 2 && (
                      <div className="calendar-event">+{dayEvents.length - 2} еще</div>
                    )}
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  export default Calendar;

.\src\components\events\CategoryFilter.jsx

import { useState } from 'react';
import { CATEGORIES } from '../../utils/constants';

const CategoryFilter = ({ onCategoryChange }) => {
  const [activeCategory, setActiveCategory] = useState('Все мероприятия');

  const handleCategoryClick = (category) => {
    setActiveCategory(category);
    if (onCategoryChange) onCategoryChange(category);
  };

  return (
    <section className="categories">
      <h2 className="section-title">
        <i className="fas fa-tags"></i> Категории мероприятий
      </h2>
      <div className="categories-list">
        {CATEGORIES.map(category => (
          <div
            key={category}
            className={`category ${activeCategory === category ? 'active' : ''}`}
            onClick={() => handleCategoryClick(category)}
          >
            {category}
          </div>
        ))}
      </div>
    </section>
  );
};

export default CategoryFilter;

.\src\components\events\CompleteEventModal.jsx

import { useState } from 'react';
import Modal from '../ui/Modal';
import Button from '../ui/Button';

const CompleteEventModal = ({ event, onClose }) => {
  const [formData, setFormData] = useState({
    title: `Отчет: ${event?.title || 'Мероприятие'}`,
    summary: '',
    tasks: ['', '', ''],
    images: []
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleTaskChange = (index, value) => {
    const newTasks = [...formData.tasks];
    newTasks[index] = value;
    setFormData(prev => ({ ...prev, tasks: newTasks }));
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    const newImages = files.map(file => URL.createObjectURL(file));
    setFormData(prev => ({ 
      ...prev, 
      images: [...prev.images, ...newImages] 
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Report submitted:', formData);
    onClose();
  };

  return (
    <Modal isOpen={true} onClose={onClose} title="Завершение мероприятия">
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label className="form-label">Заголовок новости</label>
          <input
            type="text"
            name="title"
            value={formData.title}
            onChange={handleChange}
            className="form-control"
            required
          />
        </div>

        <div className="form-group">
          <label className="form-label">Описание мероприятия</label>
          <textarea
            name="summary"
            value={formData.summary}
            onChange={handleChange}
            className="form-control"
            rows="4"
            placeholder="Расскажите о том, как прошло мероприятие"
            required
          />
        </div>

        <div className="form-group">
          <label className="form-label">Выполненные задачи</label>
          {formData.tasks.map((task, index) => (
            <input
              key={index}
              type="text"
              value={task}
              onChange={(e) => handleTaskChange(index, e.target.value)}
              className="form-control"
              placeholder={`Задача ${index + 1}`}
              style={{ marginBottom: '8px' }}
            />
          ))}
        </div>

        <div className="form-group">
          <label className="form-label">Фотоотчет</label>
          <input
            type="file"
            multiple
            accept="image/*"
            onChange={handleImageUpload}
            className="form-control"
          />
          <div className="event-gallery">
            {formData.images.map((img, index) => (
              <img 
                key={index} 
                src={img} 
                alt={`Preview ${index}`} 
                className="gallery-image"
              />
            ))}
          </div>
        </div>

        <div className="editor-actions">
          <Button type="button" onClick={onClose}>Отмена</Button>
          <Button type="submit" primary>Опубликовать отчет</Button>
        </div>
      </form>
    </Modal>
  );
};

export default CompleteEventModal;

.\src\components\events\CreateEventModal.jsx

import { useState } from 'react';
import { useAppContext } from '../../context/AppContext';

const CreateEventModal = ({ isOpen, onClose }) => {
  const { createEvent } = useAppContext();
  const [activeTab, setActiveTab] = useState('basic');
  const [formData, setFormData] = useState({
    title: '',
    category: 'Общественное мероприятие',
    date: '',
    time: '',
    duration: '2 часа',
    location: '',
    description: '',
    maxParticipants: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const event = createEvent(formData);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal">
        <div className="close-modal" onClick={onClose}>
          <i className="fas fa-times"></i>
        </div>
        <div className="modal-content">
          <div className="event-editor">
            <div className="editor-header">
              <h2 className="editor-title">Создание мероприятия</h2>
              <div className="editor-tabs">
                <button 
                  className={`editor-tab ${activeTab === 'basic' ? 'active' : ''}`}
                  onClick={() => setActiveTab('basic')}
                >
                  Основное
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'participants' ? 'active' : ''}`}
                  onClick={() => setActiveTab('participants')}
                >
                  Участники
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'notifications' ? 'active' : ''}`}
                  onClick={() => setActiveTab('notifications')}
                >
                  Уведомления
                </button>
              </div>
            </div>
            
            <form onSubmit={handleSubmit}>
              {activeTab === 'basic' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Информация о мероприятии</h3>
                  
                  <div className="form-group">
                    <label className="form-label">Название мероприятия</label>
                    <input
                      type="text"
                      name="title"
                      value={formData.title}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Введите название"
                    />
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Категория</label>
                        <select
                          name="category"
                          value={formData.category}
                          onChange={handleChange}
                          className="form-control"
                          required
                        >
                          <option>Концерт</option>
                          <option>Внутривузовская активность</option>
                          <option>Общественное мероприятие</option>
                          <option>Соревнование</option>
                          <option>Лекция</option>
                          <option>Мастер-класс</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Дата</label>
                        <input
                          type="date"
                          name="date"
                          value={formData.date}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Время начала</label>
                        <input
                          type="time"
                          name="time"
                          value={formData.time}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Продолжительность</label>
                        <input
                          type="text"
                          name="duration"
                          value={formData.duration}
                          onChange={handleChange}
                          className="form-control"
                          placeholder="Например, 2 часа"
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Место проведения</label>
                    <input
                      type="text"
                      name="location"
                      value={formData.location}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Аудитория 101, ул. Станке Димитрова, 3"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Описание</label>
                    <textarea
                      name="description"
                      value={formData.description}
                      onChange={handleChange}
                      className="form-control"
                      rows="4"
                      placeholder="Подробное описание мероприятия"
                      required
                    ></textarea>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Максимальное количество участников</label>
                    <input
                      type="number"
                      name="maxParticipants"
                      value={formData.maxParticipants}
                      onChange={handleChange}
                      className="form-control"
                      placeholder="0 - без ограничений"
                    />
                  </div>
                </div>
              )}
              
              {activeTab === 'participants' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Управление участниками</h3>
                  <p>Функционал участников будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              {activeTab === 'notifications' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Уведомления участникам</h3>
                  <p>Функционал уведомлений будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              <div className="editor-actions">
                <button 
                  type="button" 
                  className="editor-btn btn-cancel"
                  onClick={onClose}
                >
                  Отмена
                </button>
                <button 
                  type="submit" 
                  className="editor-btn btn-save"
                >
                  Сохранить мероприятие
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateEventModal;

.\src\components\events\EventActions.jsx

// src/components/events/EventActions.jsx
import { useState } from 'react';
import CompleteEventModal from './CompleteEventModal';
import Button from '../ui/Button';

const EventActions = ({ event, onEdit }) => {
  const [isCompleteModalOpen, setIsCompleteModalOpen] = useState(false);

  return (
    <div className="event-card-actions">
      {!event.isPast && (
        <>
          <Button 
            className="edit-btn"
            onClick={(e) => {
              e.stopPropagation();
              onEdit(event);
            }}
          >
            Редактировать
          </Button>
          
          <Button 
            className="complete-btn"
            onClick={(e) => {
              e.stopPropagation();
              setIsCompleteModalOpen(true);
            }}
          >
            Завершить
          </Button>
        </>
      )}
      
      {isCompleteModalOpen && (
        <CompleteEventModal 
          event={event}
          onClose={() => setIsCompleteModalOpen(false)} 
        />
      )}
    </div>
  );
};

export default EventActions;

.\src\components\events\EventCard.jsx

import { useAppContext } from '../../context/AppContext';

const EventCard = ({ event, showActions = false, onEdit, onComplete }) => {
  const { user } = useAppContext();
  const isPast = event.isPast;
  const hasImages = event.images && event.images.length > 0;

  return (
    <div className="event-card">
      {hasImages && (
        <div 
          className="event-card-image" 
          style={{ backgroundImage: `url(${event.images[0]})` }}
        />
      )}
      
      <div className="event-card-content">
        <h3 className="event-card-title">{event.title}</h3>
        
        <div className="event-card-meta">
          <span><i className="fas fa-calendar"></i> {event.date}</span>
          <span><i className="fas fa-clock"></i> {event.time}</span>
          <span><i className="fas fa-map-marker-alt"></i> {event.location}</span>
        </div>
        
        <span className={`event-card-status ${isPast ? 'status-past' : 'status-upcoming'}`}>
          {isPast ? 'Завершено' : 'Запланировано'}
        </span>
        
        {showActions && !isPast && user?.role === 'teacher' && (
          <div className="event-card-actions">
            <button 
              className="edit-btn" 
              onClick={(e) => {
                e.stopPropagation();
                onEdit && onEdit(event);
              }}
            >
              Редактировать
            </button>
            <button 
              className="edit-btn" 
              onClick={(e) => {
                e.stopPropagation();
                onComplete && onComplete(event);
              }}
              style={{ marginLeft: '8px' }}
            >
              Завершить
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default EventCard;

.\src\components\events\EventForm.jsx

import { useState, useEffect } from 'react'
import { useEvents } from '../../context/EventContext'
import Modal from '../ui/Modal'
import Button from '../ui/Button'

const EventForm = ({ event, onClose }) => {
  const { addEvent, editEvent } = useEvents()
  const [activeTab, setActiveTab] = useState('basic')
  const [formData, setFormData] = useState({
    title: '',
    category: 'Общественное мероприятие',
    date: '',
    time: '',
    duration: '2 часа',
    location: '',
    description: '',
    maxParticipants: 0
  })
  
  useEffect(() => {
    if (event) {
      setFormData({
        title: event.title,
        category: event.category,
        date: event.date.split('T')[0],
        time: event.time.split(' - ')[0],
        duration: event.duration,
        location: event.location,
        description: event.description,
        maxParticipants: event.maxParticipants || 0
      })
    }
  }, [event])

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    const eventData = {
      ...formData,
      date: new Date(formData.date).toISOString(),
      time: `${formData.time} - ${calculateEndTime(formData.time, formData.duration)}`
    }
    
    try {
      if (event) {
        await editEvent(event.id, eventData)
      } else {
        await addEvent(eventData)
      }
      onClose()
    } catch (error) {
      console.error('Ошибка сохранения:', error)
    }
  }

  const calculateEndTime = (startTime, duration) => {
    // Реализация расчета времени окончания
  }

  return (
    <Modal isOpen={true} onClose={onClose} title={event ? "Редактирование мероприятия" : "Создание мероприятия"}>
      <form onSubmit={handleSubmit}>
        <div className="editor-tabs">
          <button 
            type="button"
            className={`editor-tab ${activeTab === 'basic' ? 'active' : ''}`}
            onClick={() => setActiveTab('basic')}
          >
            Основное
          </button>
          <button 
            type="button"
            className={`editor-tab ${activeTab === 'participants' ? 'active' : ''}`}
            onClick={() => setActiveTab('participants')}
          >
            Участники
          </button>
          <button 
            type="button"
            className={`editor-tab ${activeTab === 'notifications' ? 'active' : ''}`}
            onClick={() => setActiveTab('notifications')}
          >
            Уведомления
          </button>
        </div>
        
        <div className="editor-section">
          {/* Поля формы */}
          <div className="form-group">
            <label className="form-label">Название мероприятия</label>
            <input
              type="text"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className="form-control"
              required
            />
          </div>
          
          {/* Остальные поля формы */}
          
          <div className="editor-actions">
            <Button type="button" onClick={onClose}>Отмена</Button>
            <Button type="submit" primary>Сохранить мероприятие</Button>
          </div>
        </div>
      </form>
    </Modal>
  )
}

export default EventForm

.\src\components\events\EventModal.jsx

import { useState } from 'react';
import { useAppContext } from '../../context/AppContext';

const CreateEventModal = ({ isOpen, onClose }) => {
  const { createEvent } = useAppContext();
  const [activeTab, setActiveTab] = useState('basic');
  const [formData, setFormData] = useState({
    title: '',
    category: 'Общественное мероприятие',
    date: '',
    time: '',
    duration: '2 часа',
    location: '',
    description: '',
    maxParticipants: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const event = createEvent(formData);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal">
        <div className="close-modal" onClick={onClose}>
          <i className="fas fa-times"></i>
        </div>
        <div className="modal-content">
          <div className="event-editor">
            <div className="editor-header">
              <h2 className="editor-title">Создание мероприятия</h2>
              <div className="editor-tabs">
                <button 
                  className={`editor-tab ${activeTab === 'basic' ? 'active' : ''}`}
                  onClick={() => setActiveTab('basic')}
                >
                  Основное
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'participants' ? 'active' : ''}`}
                  onClick={() => setActiveTab('participants')}
                >
                  Участники
                </button>
                <button 
                  className={`editor-tab ${activeTab === 'notifications' ? 'active' : ''}`}
                  onClick={() => setActiveTab('notifications')}
                >
                  Уведомления
                </button>
              </div>
            </div>
            
            <form onSubmit={handleSubmit}>
              {activeTab === 'basic' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Информация о мероприятии</h3>
                  
                  <div className="form-group">
                    <label className="form-label">Название мероприятия</label>
                    <input
                      type="text"
                      name="title"
                      value={formData.title}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Введите название"
                    />
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Категория</label>
                        <select
                          name="category"
                          value={formData.category}
                          onChange={handleChange}
                          className="form-control"
                          required
                        >
                          <option>Концерт</option>
                          <option>Внутривузовская активность</option>
                          <option>Общественное мероприятие</option>
                          <option>Соревнование</option>
                          <option>Лекция</option>
                          <option>Мастер-класс</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Дата</label>
                        <input
                          type="date"
                          name="date"
                          value={formData.date}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Время начала</label>
                        <input
                          type="time"
                          name="time"
                          value={formData.time}
                          onChange={handleChange}
                          className="form-control"
                          required
                        />
                      </div>
                    </div>
                    <div className="form-col">
                      <div className="form-group">
                        <label className="form-label">Продолжительность</label>
                        <input
                          type="text"
                          name="duration"
                          value={formData.duration}
                          onChange={handleChange}
                          className="form-control"
                          placeholder="Например, 2 часа"
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Место проведения</label>
                    <input
                      type="text"
                      name="location"
                      value={formData.location}
                      onChange={handleChange}
                      className="form-control"
                      required
                      placeholder="Аудитория 101, ул. Станке Димитрова, 3"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Описание</label>
                    <textarea
                      name="description"
                      value={formData.description}
                      onChange={handleChange}
                      className="form-control"
                      rows="4"
                      placeholder="Подробное описание мероприятия"
                      required
                    ></textarea>
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">Максимальное количество участников</label>
                    <input
                      type="number"
                      name="maxParticipants"
                      value={formData.maxParticipants}
                      onChange={handleChange}
                      className="form-control"
                      placeholder="0 - без ограничений"
                    />
                  </div>
                </div>
              )}
              
              {activeTab === 'participants' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Управление участниками</h3>
                  <p>Функционал участников будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              {activeTab === 'notifications' && (
                <div className="editor-section">
                  <h3 className="editor-section-title">Уведомления участникам</h3>
                  <p>Функционал уведомлений будет реализован после подключения бэкенда</p>
                </div>
              )}
              
              <div className="editor-actions">
                <button 
                  type="button" 
                  className="editor-btn btn-cancel"
                  onClick={onClose}
                >
                  Отмена
                </button>
                <button 
                  type="submit" 
                  className="editor-btn btn-save"
                >
                  Сохранить мероприятие
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateEventModal;

.\src\components\events\NewsFeed.jsx

import { useAppContext } from '../../context/AppContext';
import EventCard from './EventCard';

const NewsFeed = () => {
  const { events } = useAppContext();
  
  // Фильтруем прошедшие мероприятия с отчетом
  const newsEvents = events.filter(event => 
    event.isPast && event.report
  );

  return (
    <section className="news-section">
      <h2 className="section-title">
        <i className="fas fa-newspaper"></i> Новостная лента
      </h2>
      
      {newsEvents.length === 0 ? (
        <p className="no-events">Нет новостей</p>
      ) : (
        <div className="news-grid">
          {newsEvents.map(event => (
            <div 
              key={event.id} 
              className="news-card"
            >
              {event.images.length > 0 && (
                <div 
                  className="news-image" 
                  style={{ backgroundImage: `url(${event.images[0]})` }}
                ></div>
              )}
              <div className="news-content">
                <h3 className="news-title">{event.title}</h3>
                <div className="news-meta">
                  <span><i className="fas fa-user"></i> {event.responsible}</span>
                  <span><i className="fas fa-calendar"></i> {event.date}</span>
                </div>
                <p className="news-excerpt">
                  {event.report.comment.slice(0, 100)}...
                </p>
                <a className="news-link">
                  Читать подробнее <i className="fas fa-arrow-right"></i>
                </a>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>
  );
};

export default NewsFeed;

.\src\components\layout\Footer.jsx

// src/components/layout/Footer.jsx
import { Link } from 'react-router-dom';

const Footer = () => {
  return (
    <footer>
      <div className="footer-grid">
        <div>
          <div className="footer-logo">БГИТУ Афиша</div>
          <p className="footer-about">
            Агрегатор мероприятий Брянского государственного инженерно-технологического университета. 
            Здесь вы найдете информацию о всех событиях, концертах, лекциях и активностях нашего вуза.
          </p>
          <div className="subscribe-form">
            <input 
              type="email" 
              className="subscribe-input" 
              placeholder="Ваш email" 
            />
            <button className="subscribe-btn">Подписаться</button>
          </div>
        </div>
        
        <div>
          <div className="footer-title">Быстрые ссылки</div>
          <div className="footer-links">
            <Link to="/" className="footer-link">Главная</Link>
            <Link to="/events" className="footer-link">Календарь мероприятий</Link>
            <Link to="/" className="footer-link">Новостная лента</Link>
            <Link to="/events" className="footer-link">Мои мероприятия</Link>
            <Link to="/events/create" className="footer-link">Создать мероприятие</Link>
          </div>
        </div>
        
        <div>
          <div className="footer-title">Сайты вуза</div>
          <div className="footer-links">
            <a href="https://bgitu.ru" className="footer-link" target="_blank" rel="noopener noreferrer">Официальный сайт БГИТУ</a>
            <a href="https://compass.bgitu.ru" className="footer-link" target="_blank" rel="noopener noreferrer">Компас - Расписание</a>
            <a href="https://library.bgitu.ru" className="footer-link" target="_blank" rel="noopener noreferrer">Электронная библиотека</a>
            <a href="https://studsovet.bgitu.ru" className="footer-link" target="_blank" rel="noopener noreferrer">Студенческий совет</a>
            <a href="https://research.bgitu.ru" className="footer-link" target="_blank" rel="noopener noreferrer">Научные публикации</a>
          </div>
        </div>
      </div>
      
      <div className="footer-bottom">
        <div className="copyright">© 2025 БГИТУ. Все права защищены.</div>
        <div className="developer">Проект компании "Содружество независимых друзей"</div>
      </div>
    </footer>
  );
};

export default Footer;

.\src\components\layout\Header.jsx

import { useState, useRef, useEffect } from 'react';
import { useAppContext } from '../../context/AppContext';
import Notifications from '../ui/Notification';

const Header = ({ onMyEventsClick, onHomeClick, onCreateEventClick }) => {
  const { user, logout } = useAppContext();
  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false);
  const profileRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (profileRef.current && !profileRef.current.contains(e.target)) {
        setProfileDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleLogout = () => {
    logout();
    setProfileDropdownOpen(false);
  };

  return (
    <header className="header">
      <a href="#" className="logo-container" onClick={(e) => {
        e.preventDefault();
        onHomeClick();
      }}>
        <div className="logo">БГ</div>
        <div className="logo-text">БГИТУ <span>Афиша</span></div>
      </a>
      
      <div className="search-container">
        <i className="fas fa-search search-icon"></i>
        <input 
          type="text" 
          className="search-box" 
          placeholder="Поиск мероприятий..." 
        />
      </div>
      
      <div className="header-actions">
        <button 
          className="header-btn"
          onClick={onMyEventsClick}
        >
          <i className="fas fa-calendar-alt"></i>
          <span className="header-text">Мои мероприятия</span>
        </button>
        
        <button 
          className="header-btn primary"
          onClick={onCreateEventClick}
        >
          <i className="fas fa-plus"></i>
          <span className="header-text">Создать мероприятие</span>
        </button>
        
        <Notifications />
        
        <div className="profile-container" ref={profileRef}>
          <div 
            className="header-icon" 
            onClick={() => setProfileDropdownOpen(!profileDropdownOpen)}
          >
            <i className="fas fa-user"></i>
          </div>
          
          {profileDropdownOpen && (
            <div className="dropdown profile-dropdown">
              <div className="dropdown-header">{user?.name || "Пользователь"}</div>
              <div 
                className="dropdown-item"
                onClick={onMyEventsClick}
              >
                <i className="fas fa-calendar-check"></i>
                Мои мероприятия
              </div>
              <div className="dropdown-item">
                <i className="fas fa-cog"></i>
                Настройки
              </div>
              <div className="dropdown-item">
                <i className="fas fa-headset"></i>
                Обратиться к администратору
              </div>
              <div className="dropdown-item" onClick={handleLogout}>
                <i className="fas fa-sign-out-alt"></i>
                Выйти
              </div>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;

.\src\components\layout\Layout.jsx

import { Outlet } from 'react-router-dom';
import Header from './Header';
import Footer from './Footer';

const Layout = () => {
  return (
    <div className="app-layout">
      <Header />
      <main className="main-content">
        <Outlet />
      </main>
      <Footer />
    </div>
  );
};

export default Layout;

.\src\components\sections\Banner.jsx

import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

const Banner = ({ events = [] }) => {
  const [currentSlide, setCurrentSlide] = useState(0);
  
  useEffect(() => {
    if (events.length === 0) return;
    
    const interval = setInterval(() => {
      setCurrentSlide(prev => (prev + 1) % events.length);
    }, 5000);
    
    return () => clearInterval(interval);
  }, [events.length]);

  if (events.length === 0) return null;

  return (
    <section className="banner">
      {events.map((event, index) => (
        <div 
          key={event.id}
          className={`banner-slide ${index === currentSlide ? 'active' : ''}`}
          style={{ backgroundImage: `linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(${event.image || '/placeholder.jpg'})` }}
        >
          <div className="banner-content">
            <h2 className="banner-title">{event.title}</h2>
            <p className="banner-text">{event.description?.substring(0, 100) || 'Описание мероприятия'}...</p>
            <Link to={`/events/${event.id}`} className="banner-btn">
              Узнать подробности
            </Link>
          </div>
        </div>
      ))}
      
      <div className="banner-nav">
        {events.map((_, index) => (
          <div 
            key={index}
            className={`banner-dot ${index === currentSlide ? 'active' : ''}`}
            onClick={() => setCurrentSlide(index)}
          ></div>
        ))}
      </div>
      
      <button 
        className="banner-arrow prev-arrow"
        onClick={() => setCurrentSlide(prev => (prev - 1 + events.length) % events.length)}
      >
        <i className="fas fa-chevron-left"></i>
      </button>
      
      <button 
        className="banner-arrow next-arrow"
        onClick={() => setCurrentSlide(prev => (prev + 1) % events.length)}
      >
        <i className="fas fa-chevron-right"></i>
      </button>
    </section>
  );
};

export default Banner;

.\src\components\sections\CalendarSection.jsx

// src/components/sections/CalendarSection.jsx
import { useState } from 'react';
import Calendar from '../events/Calendar';
import Button from '../ui/Button';
import EventModal from '../events/EventModal';

const CalendarSection = ({ events }) => {
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [showAllEvents, setShowAllEvents] = useState(false);
  const [eventModalOpen, setEventModalOpen] = useState(false);

  const handleDayClick = (day) => {
    const dayEvents = events.filter(event => 
      new Date(event.date).toDateString() === day.toDateString()
    );
    
    if (dayEvents.length > 0) {
      setSelectedEvent(dayEvents[0]);
      setEventModalOpen(true);
    }
  };

  const handleNavigateEvents = (direction) => {
    const dayEvents = events.filter(event => 
      new Date(event.date).toDateString() === selectedDate.toDateString()
    );
    
    if (dayEvents.length > 1) {
      const currentIndex = dayEvents.findIndex(e => e.id === selectedEvent.id);
      const nextIndex = (currentIndex + direction + dayEvents.length) % dayEvents.length;
      setSelectedEvent(dayEvents[nextIndex]);
    }
  };

  return (
    <section className="calendar-section">
      <Calendar events={events} onDayClick={handleDayClick} />
      
      <Button 
        className="view-all-btn" 
        onClick={() => setShowAllEvents(true)}
      >
        Все события на этот месяц
      </Button>
      
      {selectedEvent && (
        <EventModal
          event={selectedEvent}
          isOpen={eventModalOpen}
          onClose={() => setEventModalOpen(false)}
          onNavigate={handleNavigateEvents}
        />
      )}
    </section>
  );
};

export default CalendarSection;

.\src\components\sections\NewsSection.jsx

import EventCard from '../events/EventCard';

const NewsSection = ({ events = [] }) => {
  if (events.length === 0) return null;

  return (
    <section className="news-section">
      <h2 className="section-title">
        <i className="fas fa-newspaper"></i> Новостная лента
      </h2>
      
      <div className="news-grid">
        {events.map(event => (
          <div key={event.id} className="news-card">
            {event.images && event.images.length > 0 && (
              <div 
                className="news-image" 
                style={{ backgroundImage: `url(${event.images[0]})` }}
              ></div>
            )}
            <div className="news-content">
              <h3 className="news-title">{event.title}</h3>
              <div className="news-meta">
                <span><i className="fas fa-user"></i> {event.responsible || "Организатор"}</span>
                <span><i className="fas fa-calendar"></i> {event.date}</span>
              </div>
              <p className="news-excerpt">
                {event.report?.comment?.slice(0, 100) || 'Отчет о мероприятии...'}
              </p>
              <a className="news-link">
                Читать подробнее <i className="fas fa-arrow-right"></i>
              </a>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
};

export default NewsSection;

.\src\components\ui\Avatar.jsx

const Avatar = ({ user, onClick }) => {
    return (
      <div className="header-icon" onClick={onClick}>
        {user?.avatar ? (
          <img 
            src={user.avatar} 
            alt={user.name} 
            className="avatar-image"
          />
        ) : (
          <i className="fas fa-user"></i>
        )}
      </div>
    );
  };
  
  export default Avatar;

.\src\components\ui\Button.jsx

import classNames from 'classnames';

const Button = ({ 
  children, 
  primary,
  secondary,
  success,
  danger,
  icon, 
  onClick, 
  className, 
  badge,
  fullWidth,
  disabled,
  ...props 
}) => {
  const classes = classNames(
    'btn',
    {
      'btn-primary': primary,
      'btn-secondary': secondary,
      'btn-success': success,
      'btn-danger': danger,
      'btn-icon': icon && !children,
      'btn-full-width': fullWidth,
      'btn-disabled': disabled
    },
    className
  );

  return (
    <button 
      className={classes} 
      onClick={onClick} 
      disabled={disabled}
      {...props}
    >
      {icon && <i className={`fas fa-${icon}`}></i>}
      {children && <span>{children}</span>}
      {badge && badge > 0 && (
        <span className="btn-badge">{badge > 9 ? '9+' : badge}</span>
      )}
    </button>
  );
};

export default Button;

.\src\components\ui\Modal.jsx

import { useEffect } from 'react';
import Button from './Button';

const Modal = ({ 
  isOpen, 
  onClose, 
  children, 
  title, 
  className,
  size = 'md', // sm, md, lg, xl
  closeButton = true
}) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div 
        className={`modal ${className} ${size}`} 
        onClick={e => e.stopPropagation()}
      >
        {closeButton && (
          <Button 
            className="close-modal" 
            onClick={onClose}
            icon="times"
          />
        )}
        
        {(title || closeButton) && (
          <div className="modal-header">
            {title && <h2 className="modal-title">{title}</h2>}
          </div>
        )}
        
        <div className="modal-content">
          {children}
        </div>
      </div>
    </div>
  );
};

export default Modal;

.\src\components\ui\Notification.jsx

import { useState, useEffect } from 'react';
import { useAppContext } from '../../context/AppContext'; // Исправлен импорт
import NotificationModal from './NotificationModal';

const NotificationBell = () => {
  const {
    notifications = [],
    markNotificationAsRead
  } = useAppContext();
  
  const [unreadCount, setUnreadCount] = useState(0);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    setUnreadCount(notifications.filter(n => !n.read).length);
  }, [notifications]);

  const handleBellClick = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const handleNotificationClick = (notification) => {
    if (!notification.read) {
      markNotificationAsRead(notification.id);
    }
    setIsDropdownOpen(false);
  };

  const handleCreateNotification = () => {
    setIsDropdownOpen(false);
    setIsModalOpen(true);
  };

  return (
    <div className="notification-container">
      <div className="header-icon" onClick={handleBellClick}>
        <i className="fas fa-bell"></i>
        {unreadCount > 0 && (
          <div className="notification-count">{unreadCount}</div>
        )}
      </div>

      {isDropdownOpen && (
        <div className="dropdown notification-dropdown">
          <div className="dropdown-header">Уведомления</div>
          
          {notifications.length === 0 ? (
            <div className="dropdown-item">Нет уведомлений</div>
          ) : (
            <>
              {notifications.slice(0, 5).map(notification => (
                <div 
                  key={notification.id} 
                  className={`dropdown-item ${notification.read ? '' : 'unread'}`}
                  onClick={() => handleNotificationClick(notification)}
                >
                  <i className={`fas fa-${
                    notification.type === 'new' ? 'calendar-plus' : 
                    notification.type === 'change' ? 'edit' : 
                    notification.type === 'complete' ? 'check-circle' : 'info-circle'
                  }`}></i>
                  {notification.message}
                </div>
              ))}
            </>
          )}
          
          <div 
            className="dropdown-item" 
            onClick={handleCreateNotification}
          >
            <i className="fas fa-plus"></i>
            Создать уведомление
          </div>
        </div>
      )}

      {isModalOpen && (
        <NotificationModal onClose={() => setIsModalOpen(false)} />
      )}
    </div>
  );
};

export default NotificationBell;

.\src\components\ui\NotificationModal.jsx

// src/components/notifications/NotificationModal.jsx
import { useState } from 'react';
import { useEvents } from '../../context/EventContext';
import Modal from './Modal';
import Button from './Button';

const NotificationModal = ({ onClose }) => {
  const { events, sendEventNotification } = useEvents();
  const [formData, setFormData] = useState({
    eventId: '',
    template: 'change',
    content: '',
    recipients: 'all'
  });

  const templates = {
    change: 'Изменение времени: Мероприятие "[Название]" перенесено на [Дата] [Время]',
    new: 'Новое мероприятие: Приглашаем на [Название мероприятия] [Дата] [Время]',
    reminder: 'Напоминание: Завтра в [Время] состоится мероприятие "[Название]"'
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
      content: name === 'template' ? templates[value] : prev.content
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await sendEventNotification(
      formData.eventId,
      formData.content,
      formData.recipients
    );
    onClose();
  };

  return (
    <Modal isOpen={true} onClose={onClose} title="Создать уведомление">
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label className="form-label">Выберите мероприятие</label>
          <select
            name="eventId"
            value={formData.eventId}
            onChange={handleChange}
            className="form-control"
            required
          >
            <option value="">Выберите мероприятие</option>
            {events.future.map(event => (
              <option key={event.id} value={event.id}>
                {event.title}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label className="form-label">Шаблон уведомления</label>
          <select
            name="template"
            value={formData.template}
            onChange={handleChange}
            className="form-control"
          >
            <option value="change">Изменение деталей</option>
            <option value="new">Новое мероприятие</option>
            <option value="reminder">Напоминание</option>
          </select>
        </div>

        <div className="form-group">
          <label className="form-label">Текст уведомления</label>
          <textarea
            name="content"
            value={formData.content}
            onChange={handleChange}
            className="form-control"
            rows="4"
            required
          />
        </div>

        <div className="form-group">
          <label className="form-label">Получатели</label>
          <select
            name="recipients"
            value={formData.recipients}
            onChange={handleChange}
            className="form-control"
          >
            <option value="all">Все участники</option>
            <option value="confirmed">Только подтвердившие</option>
            <option value="pending">Только ожидающие подтверждения</option>
          </select>
        </div>

        <div className="editor-actions">
          <Button type="button" onClick={onClose}>Отмена</Button>
          <Button type="submit" primary>Отправить уведомление</Button>
        </div>
      </form>
    </Modal>
  );
};

export default NotificationModal;

.\src\components\ui\SearchInput.jsx

// src/components/ui/SearchInput.jsx
import { useState } from 'react';

const SearchInput = ({ placeholder, onSearch }) => {
  const [query, setQuery] = useState('');

  const handleChange = (e) => {
    setQuery(e.target.value);
    if (onSearch) onSearch(e.target.value);
  };

  return (
    <div className="search-container">
      <i className="fas fa-search search-icon"></i>
      <input
        type="text"
        className="search-box"
        placeholder={placeholder}
        value={query}
        onChange={handleChange}
      />
    </div>
  );
};

export default SearchInput;

.\src\context\AppContext.jsx

/* eslint-disable react-refresh/only-export-components */
import { createContext, useContext, useState, useCallback } from 'react';
// Экспортируем контекст отдельно
export const AppContext = createContext();

// Создаем кастомный хук для использования контекста
export const useAppContext = () => useContext(AppContext);

export const AppProvider = ({ children }) => {
  const [user] = useState({
    id: 1,
    name: "Иван Петров",
    role: "teacher",
    group: "ИС-21",
    department: "Кафедра информационных технологий"
  });

  const [notifications, setNotifications] = useState([
    {
      id: 1,
      title: 'Новое мероприятие: День открытых дверей',
      type: 'event',
      read: false,
      date: '2025-07-05T10:30:00'
    }
  ]);

  const [events, setEvents] = useState([
    {
      id: 1,
      title: "День открытых дверей БГИТУ",
      category: "Общественное мероприятие",
      date: "2025-07-15",
      time: "10:00 - 14:00",
      location: "Главный корпус, ауд. 301",
      description: "Приглашаем абитуриентов и их родителей на ежегодный День открытых дверей...",
      maxParticipants: 150,
      currentParticipants: 98,
      isPast: false,
      images: [],
      report: null
    },
    {
      id: 101,
      title: "Уборка Центрального парка",
      category: "Волонтерская активность",
      date: "2025-07-10",
      time: "09:00 - 13:00",
      location: "Центральный парк, Брянск",
      description: "Волонтеры БГИТУ провели масштабную уборку Центрального парка.",
      isPast: true,
      images: [
        'https://images.unsplash.com/photo-1523580494863-6f3031224c94?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
      ],
      report: {
        comment: "За 4 часа было собрано более 50 мешков мусора...",
        tasks: ["Сбор мусора", "Покраска скамеек"]
      }
    }
  ]);

  const logout = useCallback(() => {
    localStorage.removeItem('afisha_user');
    console.log("User logged out");
  }, []);

  // Добавляем функцию создания мероприятий
  const createEvent = useCallback((eventData) => {
    const newEvent = {
      ...eventData,
      id: Math.max(...events.map(e => e.id), 0) + 1,
      currentParticipants: 0,
      isPast: false,
      images: [],
      report: null
    };
    setEvents(prev => [...prev, newEvent]);
    return newEvent;
  }, [events]);

  // Добавляем функцию пометки уведомлений прочитанными
  const markNotificationAsRead = useCallback((id) => {
    setNotifications(prev =>
        prev.map(n => n.id === id ? {...n, read: true} : n)
    );
  }, []);

  const value = {
    user,
    notifications,
    events,
    logout,
    createEvent,
    markNotificationAsRead
  };

  return (
      <AppContext.Provider value={value}>
        {children}
      </AppContext.Provider>
  );
};

.\src\context\AuthContext.jsx

import { createContext, useContext, useState, useEffect } from 'react'
import { login as apiLogin, logout as apiLogout } from '../api/auth'

const AuthContext = createContext()

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Для временного тестирования - загружаем тестового пользователя
    const testUser = {
      id: 1,
      name: "Иван Иванов",
      email: "test@bgitu.ru",
      role: "teacher", // или "student"
      avatar: null,
      department: "Кафедра информационных технологий",
      group: "ИСТ-123" // для студентов
    };
    
    setUser(testUser);
    localStorage.setItem('afisha_user', JSON.stringify(testUser));
    
    setLoading(false);
  }, []);

  const login = async (credentials) => {
    const userData = await apiLogin(credentials)
    setUser(userData)
    localStorage.setItem('afisha_user', JSON.stringify(userData))
    return userData
  }

  const logout = () => {
    apiLogout()
    setUser(null)
    localStorage.removeItem('afisha_user')
  }

  const value = {
    user,
    loading,
    login,
    logout,
    isAuthenticated: !!user,
    isTeacher: user?.role === 'teacher',
    isStudent: user?.role === 'student'
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export const useAuth = () => useContext(AuthContext)

.\src\context\EventContext.jsx

// src/context/EventContext.jsx
import { createContext, useContext, useState, useEffect } from 'react';
import { fetchEvents, createEvent, updateEvent, completeEvent, sendNotification } from '../api/events';

const EventContext = createContext();

export const useEvents = () => useContext(EventContext);

export const EventProvider = ({ children }) => {
  const [events, setEvents] = useState({ future: [], past: [] });
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadEvents();
  }, []);

  const loadEvents = async () => {
    try {
      setLoading(true);
      const data = await fetchEvents();
      setEvents({
        future: data.filter(e => new Date(e.date) > new Date()),
        past: data.filter(e => new Date(e.date) <= new Date())
      });
      setNotifications(data.flatMap(e => e.notifications || []));
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const addEvent = async (eventData) => {
    const newEvent = await createEvent(eventData);
    setEvents(prev => ({
      ...prev,
      future: [...prev.future, newEvent]
    }));
    
    // Добавляем уведомление о создании
    addNotification({
      type: 'new',
      message: `Создано новое мероприятие: ${newEvent.title}`,
      eventId: newEvent.id,
      timestamp: new Date().toISOString()
    });
    
    return newEvent;
  };

  const editEvent = async (id, updates) => {
    const updatedEvent = await updateEvent(id, updates);
    setEvents(prev => ({
      future: prev.future.map(e => e.id === id ? updatedEvent : e),
      past: prev.past.map(e => e.id === id ? updatedEvent : e)
    }));
    
    // Уведомление об изменении
    addNotification({
      type: 'change',
      message: `Изменено мероприятие: ${updatedEvent.title}`,
      eventId: id,
      timestamp: new Date().toISOString()
    });
    
    return updatedEvent;
  };

  const finishEvent = async (id, reportData) => {
    const completedEvent = await completeEvent(id, reportData);
    setEvents(prev => ({
      future: prev.future.filter(e => e.id !== id),
      past: [completedEvent, ...prev.past]
    }));
    
    // Уведомление о завершении
    addNotification({
      type: 'complete',
      message: `Завершено мероприятие: ${completedEvent.title}`,
      eventId: id,
      timestamp: new Date().toISOString()
    });
    
    return completedEvent;
  };

  const addNotification = (notification) => {
    setNotifications(prev => [notification, ...prev]);
  };

  const sendEventNotification = async (eventId, content, recipients) => {
    await sendNotification(eventId, { content, recipients });
    addNotification({
      type: 'custom',
      message: `Отправлено уведомление для мероприятия`,
      eventId,
      timestamp: new Date().toISOString()
    });
  };

  const value = {
    events,
    notifications,
    loading,
    error,
    addEvent,
    editEvent,
    finishEvent,
    sendEventNotification,
    addNotification
  };

  return (
    <EventContext.Provider value={value}>
      {children}
    </EventContext.Provider>
  );
};

.\src\hooks\useApi.js

// src/hooks/useApi.js
import { useState, useCallback } from 'react';

const useApi = (apiFunction) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const execute = useCallback(async (...args) => {
    try {
      setLoading(true);
      setError(null);
      const response = await apiFunction(...args);
      setData(response);
      return response;
    } catch (err) {
      setError(err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [apiFunction]);

  return { data, loading, error, execute };
};

export default useApi;

.\src\hooks\useAuth.js

import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default useAuth;

.\src\hooks\useEvents.js

import { useEffect } from 'react';
import useEventStore from '../store/eventStore';

const useEvents = () => {
  const {
    events,
    futureEvents,
    pastEvents,
    loading,
    error,
    currentEvent,
    fetchEvents,
    fetchEvent,
    addEvent,
    updateEvent,
    participate,
    removeEvent
  } = useEventStore();

  useEffect(() => {
    if (events.length === 0) {
      fetchEvents();
    }
  }, [fetchEvents, events.length]);

  return {
    events,
    futureEvents,
    pastEvents,
    currentEvent,
    loading,
    error,
    fetchEvents,
    fetchEvent,
    addEvent,
    updateEvent,
    participate,
    removeEvent
  };
};

export default useEvents;

.\src\pages\Events.jsx

import { useState } from 'react'
import { useAuth } from '../context/AuthContext'
import { useEvents } from '../context/EventContext'
import EventCard from '../components/events/EventCard'
import EventForm from '../components/events/EventForm'
import Button from '../components/ui/Button'

const Events = () => {
  const { isTeacher } = useAuth()
  const { futureEvents, pastEvents } = useEvents()
  const [activeTab, setActiveTab] = useState('upcoming')
  const [showForm, setShowForm] = useState(false)
  const [editingEvent, setEditingEvent] = useState(null)

  const handleEdit = (event) => {
    setEditingEvent(event)
    setShowForm(true)
  }

  const handleFormClose = () => {
    setShowForm(false)
    setEditingEvent(null)
  }

  return (
    <div className="events-page">
      <h2 className="section-title">
        <i className="fas fa-calendar-check"></i> Мои мероприятия
      </h2>
      
      <div className="events-tabs">
        <button 
          className={`events-tab ${activeTab === 'upcoming' ? 'active' : ''}`}
          onClick={() => setActiveTab('upcoming')}
        >
          Будущие события
        </button>
        <button 
          className={`events-tab ${activeTab === 'past' ? 'active' : ''}`}
          onClick={() => setActiveTab('past')}
        >
          Прошедшие события
        </button>
      </div>
      
      <div className="events-content">
        {activeTab === 'upcoming' && (
          <div className="events-grid">
            {futureEvents.length > 0 ? (
              futureEvents.map(event => (
                <EventCard 
                  key={event.id} 
                  event={event} 
                  showActions={isTeacher}
                  onEdit={handleEdit}
                />
              ))
            ) : (
              <p>Нет запланированных мероприятий</p>
            )}
          </div>
        )}
        
        {activeTab === 'past' && (
          <div className="events-grid">
            {pastEvents.length > 0 ? (
              pastEvents.map(event => (
                <EventCard key={event.id} event={event} />
              ))
            ) : (
              <p>Нет завершенных мероприятий</p>
            )}
          </div>
        )}
      </div>
      
      {isTeacher && (
        <div className="create-event-btn">
          <Button primary icon="plus" onClick={() => setShowForm(true)}>
            Создать новое мероприятие
          </Button>
        </div>
      )}
      
      {showForm && (
        <EventForm 
          event={editingEvent} 
          onClose={handleFormClose} 
        />
      )}
    </div>
  )
}

export default Events

.\src\pages\Home.jsx

import { useEffect } from 'react'
import { useEvents } from '../context/EventContext'
import Banner from '../components/sections/Banner'
import CategoryFilter from '../components/events/CategoryFilter'
import CalendarSection from '../components/sections/CalendarSection'
import NewsSection from '../components/sections/NewsSection'

const Home = () => {
  const { futureEvents, pastEvents, loadEvents, loading } = useEvents()

  useEffect(() => {
    loadEvents()
  }, [])

  if (loading) return <div className="loader">Загрузка мероприятий...</div>

  return (
    <div className="home-page">
      <CategoryFilter />
      
      <Banner events={futureEvents.slice(0, 3)} />
      
      <CalendarSection events={[...futureEvents, ...pastEvents]} />
      
      <NewsSection events={pastEvents} />
    </div>
  )
}

export default Home

.\src\pages\Login.jsx

// src/pages/Login.jsx
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import Button from '../components/ui/Button';
import { login } from '../api/auth';

const Login = () => {
  const [credentials, setCredentials] = useState({ 
    email: '', 
    password: '' 
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { setUser } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    try {
      const user = await login(credentials);
      setUser(user);
      navigate('/');
    } catch (err) {
      setError('Неверные учетные данные. Проверьте email и пароль.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <div className="login-header">
          <div className="logo-container">
            <div className="logo">БГ</div>
            <div className="logo-text">БГИТУ <span>Афиша</span></div>
          </div>
          <h2>Вход в систему</h2>
          <p>Используйте учетные данные БГИТУ</p>
        </div>
        
        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <label>Email</label>
            <input
              type="email"
              value={credentials.email}
              onChange={(e) => setCredentials({...credentials, email: e.target.value})}
              placeholder="user@bgitu.ru"
              required
              disabled={loading}
            />
          </div>
          
          <div className="form-group">
            <label>Пароль</label>
            <input
              type="password"
              value={credentials.password}
              onChange={(e) => setCredentials({...credentials, password: e.target.value})}
              required
              disabled={loading}
            />
          </div>
          
          {error && <div className="error-message">{error}</div>}
          
          <Button 
            type="submit" 
            primary 
            fullWidth
            loading={loading}
            disabled={loading}
          >
            {loading ? 'Вход...' : 'Войти'}
          </Button>
        </form>
        
        <div className="login-footer">
          <p>Нет аккаунта? Обратитесь к администратору системы</p>
          <p>
            <a href="#">Забыли пароль?</a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;

.\src\pages\MyEventsPage.jsx

import { useState } from 'react';
import { useAppContext } from '../context/AppContext';
import EventCard from '../components/events/EventCard';
import CompleteEventModal from '../components/events/CompleteEventModal';

const MyEventsPage = () => {
  const { events } = useAppContext();
  const [activeTab, setActiveTab] = useState('upcoming');
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [completeModalOpen, setCompleteModalOpen] = useState(false);

  // Фильтруем мероприятия по статусу
  const upcomingEvents = events.filter(event => !event.isPast);
  const pastEvents = events.filter(event => event.isPast);

  const handleCompleteEvent = (event) => {
    setSelectedEvent(event);
    setCompleteModalOpen(true);
  };

  const handleCompleteSubmit = (reportData) => {
    // В реальном приложении здесь будет вызов API
    console.log('Отчет о мероприятии:', reportData);
    setCompleteModalOpen(false);
  };

  return (
    <section className="my-events-section">
      <h2 className="section-title">
        <i className="fas fa-calendar-check"></i> Мои мероприятия
      </h2>
      
      <div className="events-tabs">
        <div 
          className={`events-tab ${activeTab === 'upcoming' ? 'active' : ''}`}
          onClick={() => setActiveTab('upcoming')}
        >
          Будущие события
        </div>
        <div 
          className={`events-tab ${activeTab === 'past' ? 'active' : ''}`}
          onClick={() => setActiveTab('past')}
        >
          Прошедшие события
        </div>
      </div>
      
      <div className={`events-tab-content ${activeTab === 'upcoming' ? 'active' : ''}`}>
        <div className="events-grid">
          {upcomingEvents.map(event => (
            <EventCard 
              key={event.id} 
              event={event} 
              showActions={true}
              onEdit={() => console.log('Редактирование', event.id)}
              onComplete={() => handleCompleteEvent(event)}
            />
          ))}
        </div>
      </div>
      
      <div className={`events-tab-content ${activeTab === 'past' ? 'active' : ''}`}>
        <div className="carousel-container">
          {pastEvents.map(event => (
            <div className="carousel-item" key={event.id}>
              <EventCard event={event} />
            </div>
          ))}
        </div>
      </div>
      
      {selectedEvent && (
        <CompleteEventModal 
          isOpen={completeModalOpen}
          onClose={() => setCompleteModalOpen(false)}
          onSubmit={handleCompleteSubmit}
          event={selectedEvent}
        />
      )}
    </section>
  );
};

export default MyEventsPage;

.\src\pages\Profile.jsx

// src/pages/Profile.jsx
import { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import Avatar from '../components/ui/Avatar';
import Button from '../components/ui/Button';



const Profile = () => {
  const { user, updateProfile } = useAuth();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    avatar: null,
    notifications: {
      newEvents: true,
      changes: true,
      news: false
    }
  });

  useEffect(() => {
    if (user) {
      setFormData({
        name: user.name || '',
        email: user.email || '',
        avatar: user.avatar || null,
        notifications: user.notifications || {
          newEvents: true,
          changes: true,
          news: false
        }
      });
    }
  }, [user]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      notifications: {
        ...prev.notifications,
        [name]: checked
      }
    }));
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData(prev => ({ ...prev, avatar: reader.result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await updateProfile(formData);
  };

  if (!user) return <div>Загрузка профиля...</div>;

  return (
    <div className="profile-page">
      <h2 className="section-title">Настройки профиля</h2>
      
      <div className="avatar-container">
        <div className="avatar-preview">
          {formData.avatar ? (
            <img src={formData.avatar} alt="Аватар" className="avatar-image" />
          ) : (
            <i className="fas fa-user fa-2x"></i>
          )}
        </div>
        <div>
          <input 
            type="file" 
            id="avatar-upload" 
            accept="image/*" 
            onChange={handleAvatarChange}
            style={{ display: 'none' }}
          />
          <Button 
            onClick={() => document.getElementById('avatar-upload').click()}
          >
            Загрузить фото
          </Button>
          <p>Рекомендуемый размер: 300×300 px</p>
        </div>
      </div>
      
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Имя</label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>
        
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        
        <div className="form-group">
          <label>Роль</label>
          <input
            type="text"
            value={user.role === 'teacher' ? 'Преподаватель' : 'Студент'}
            disabled
          />
        </div>
        
        {user.role === 'student' && (
          <div className="form-group">
            <label>Группа</label>
            <input
              type="text"
              value={user.group || ''}
              disabled
            />
          </div>
        )}
        
        {user.role === 'teacher' && (
          <div className="form-group">
            <label>Кафедра</label>
            <input
              type="text"
              value={user.department || ''}
              disabled
            />
          </div>
        )}
        
        <div className="form-group">
          <label>Уведомления</label>
          <div className="notifications-settings">
            <label>
              <input
                type="checkbox"
                name="newEvents"
                checked={formData.notifications.newEvents}
                onChange={handleCheckboxChange}
              />
              Новые мероприятия
            </label>
            <label>
              <input
                type="checkbox"
                name="changes"
                checked={formData.notifications.changes}
                onChange={handleCheckboxChange}
              />
              Изменения в моих мероприятиях
            </label>
            <label>
              <input
                type="checkbox"
                name="news"
                checked={formData.notifications.news}
                onChange={handleCheckboxChange}
              />
              Новости университета
            </label>
          </div>
        </div>
        
        <div className="form-actions">
          <Button type="button">Отмена</Button>
          <Button type="submit" primary>Сохранить изменения</Button>
        </div>
      </form>
    </div>
  );
};

export default Profile;

.\src\routes\AppRouter.jsx

import { BrowserRouter, Routes, Route } from 'react-router-dom'
import Layout from '../components/layout/Layout'
import Home from '../pages/Home'
import Events from '../pages/Events'
import Login from '../pages/Login'
import Profile from '../pages/Profile'

const AppRouter = () => {
  return (
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="events" element={<Events />} />
          <Route path="login" element={<Login />} />
          <Route path="profile" element={<Profile />} />
        </Route>
      </Routes>
  )
}

export default AppRouter

.\src\store\authStore.js

// src/store/authStore.js
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { login, logout, getUserProfile } from '../api/auth';

const useAuthStore = create(
  persist(
    (set) => ({
      user: null,
      loading: false,
      error: null,
      
      login: async (credentials) => {
        set({ loading: true, error: null });
        try {
          const user = await login(credentials);
          set({ user, loading: false });
          return user;
        } catch (error) {
          set({ error: error.message, loading: false });
          throw error;
        }
      },
      
      logout: async () => {
        await logout();
        set({ user: null });
      },
      
      fetchProfile: async () => {
        set({ loading: true });
        try {
          const user = await getUserProfile();
          set({ user, loading: false });
          return user;
        } catch (error) {
          set({ error: error.message, loading: false });
          throw error;
        }
      },
      
      updateProfile: async (profileData) => {
        set({ loading: true });
        try {
          // Здесь будет вызов API для обновления профиля
          set(state => ({ 
            user: { ...state.user, ...profileData },
            loading: false 
          }));
        } catch (error) {
          set({ error: error.message, loading: false });
          throw error;
        }
      }
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({ user: state.user }),
    }
  )
);

export default useAuthStore;

.\src\store\eventStore.js

// src/store/eventStore.js
import { create } from 'zustand';
import { 
  fetchEvents, 
  fetchEventById, 
  createEvent, 
  updateEvent,
  deleteEvent,
  registerForEvent
} from '../api/events';

const useEventStore = create((set, get) => ({
  events: [],
  futureEvents: [],
  pastEvents: [],
  loading: false,
  error: null,
  currentEvent: null,
  
  fetchEvents: async () => {
    set({ loading: true });
    try {
      const events = await fetchEvents();
      const now = new Date();
      
      const future = events.filter(e => new Date(e.date) > now);
      const past = events.filter(e => new Date(e.date) <= now);
      
      set({ events, futureEvents: future, pastEvents: past, loading: false });
    } catch (error) {
      set({ error: error.message, loading: false });
    }
  },
  
  fetchEvent: async (id) => {
    set({ loading: true });
    try {
      const event = await fetchEventById(id);
      set({ currentEvent: event, loading: false });
      return event;
    } catch (error) {
      set({ error: error.message, loading: false });
      throw error;
    }
  },
  
  addEvent: async (eventData) => {
    set({ loading: true });
    try {
      const newEvent = await createEvent(eventData);
      set(state => {
        const events = [...state.events, newEvent];
        const now = new Date();
        
        const future = events.filter(e => new Date(e.date) > now);
        return { 
          events,
          futureEvents: future,
          loading: false
        };
      });
      return newEvent;
    } catch (error) {
      set({ error: error.message, loading: false });
      throw error;
    }
  },
  
  updateEvent: async (id, updates) => {
    set({ loading: true });
    try {
      const updatedEvent = await updateEvent(id, updates);
      set(state => {
        const events = state.events.map(e => e.id === id ? updatedEvent : e);
        const now = new Date();
        
        const future = events.filter(e => new Date(e.date) > now);
        const past = events.filter(e => new Date(e.date) <= now);
        
        return {
          events,
          futureEvents: future,
          pastEvents: past,
          currentEvent: state.currentEvent?.id === id ? updatedEvent : state.currentEvent,
          loading: false
        };
      });
      return updatedEvent;
    } catch (error) {
      set({ error: error.message, loading: false });
      throw error;
    }
  },
  
  participate: async (eventId) => {
    set({ loading: true });
    try {
      const updatedEvent = await registerForEvent(eventId);
      set(state => {
        const events = state.events.map(e => e.id === eventId ? updatedEvent : e);
        const now = new Date();
        
        const future = events.filter(e => new Date(e.date) > now);
        const past = events.filter(e => new Date(e.date) <= now);
        
        return {
          events,
          futureEvents: future,
          pastEvents: past,
          currentEvent: state.currentEvent?.id === eventId ? updatedEvent : state.currentEvent,
          loading: false
        };
      });
      return updatedEvent;
    } catch (error) {
      set({ error: error.message, loading: false });
      throw error;
    }
  },
  
  removeEvent: async (id) => {
    set({ loading: true });
    try {
      await deleteEvent(id);
      set(state => {
        const events = state.events.filter(e => e.id !== id);
        const now = new Date();
        
        const future = events.filter(e => new Date(e.date) > now);
        const past = events.filter(e => new Date(e.date) <= now);
        
        return {
          events,
          futureEvents: future,
          pastEvents: past,
          currentEvent: state.currentEvent?.id === id ? null : state.currentEvent,
          loading: false
        };
      });
    } catch (error) {
      set({ error: error.message, loading: false });
      throw error;
    }
  }
}));

export default useEventStore;

.\src\utils\constants.js

export const CATEGORIES = [
    "Все мероприятия",
    "Концерты",
    "Внутривузовские активности",
    "Общественные мероприятия",
    "Соревнования",
    "Мастер-классы",
    "Лекции"
  ]
  
  export const EVENT_TYPES = {
    CONCERT: 'Концерт',
    ACTIVITY: 'Внутривузовская активность',
    PUBLIC: 'Общественное мероприятие',
    COMPETITION: 'Соревнование',
    LECTURE: 'Лекция',
    WORKSHOP: 'Мастер-класс'
  }

.\src\utils\helpers.js

import { format } from 'date-fns';
import { ru } from 'date-fns/locale';

export const formatDate = (dateString) => {
  const date = new Date(dateString);
  return format(date, 'd MMMM yyyy, EEEE', { locale: ru });
};

export const formatTime = (timeString) => {
  return timeString.replace('-', '–');
};

export const calculateEndTime = (startTime, duration) => {
  const [hours, minutes] = startTime.split(':').map(Number);
  const durationMatch = duration.match(/(\d+)\s*час/);
  const durationHours = durationMatch ? parseInt(durationMatch[1]) : 0;
  const minutesMatch = duration.match(/(\d+)\s*мин/);
  const durationMinutes = minutesMatch ? parseInt(minutesMatch[1]) : 0;

  const totalMinutes = hours * 60 + minutes + durationHours * 60 + durationMinutes;
  const endHours = Math.floor(totalMinutes / 60);
  const endMinutes = totalMinutes % 60;

  return `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
};

export const getEventCategoryColor = (category) => {
  const colors = {
    'Концерт': 'var(--concert)',
    'Внутривузовская активность': 'var(--activity)',
    'Общественное мероприятие': 'var(--public)',
    'Соревнование': 'var(--competition)',
    'Лекция': 'var(--accent)',
    'Мастер-класс': 'var(--warning)'
  };
  return colors[category] || 'var(--accent)';
};

.\src\App.css

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

.\src\App.jsx

import { useState } from 'react';
import { AppProvider } from './context/AppContext';
import Header from './components/layout/Header';
import CategoryFilter from './components/events/CategoryFilter';
import Banner from './components/sections/Banner';
import CalendarSection from './components/sections/CalendarSection';
import NewsSection from './components/sections/NewsSection';
import Footer from './components/layout/Footer';
import MyEventsPage from './pages/MyEventsPage';
import CreateEventModal from './components/events/CreateEventModal';

function App() {
  const [activePage, setActivePage] = useState('home');
  const [createModalOpen, setCreateModalOpen] = useState(false);
  const [events] = useState([
    {
      id: 1,
      title: "День открытых дверей БГИТУ",
      category: "Общественное мероприятие",
      date: "2025-07-15",
      time: "10:00 - 14:00",
      location: "Главный корпус, ауд. 301",
      description: "Приглашаем абитуриентов и их родителей на ежегодный День открытых дверей...",
      maxParticipants: 150,
      currentParticipants: 98,
      isPast: false,
      images: [],
      report: null
    },
    {
      id: 101,
      title: "Уборка Центрального парка",
      category: "Волонтерская активность",
      date: "2025-07-10",
      time: "09:00 - 13:00",
      location: "Центральный парк, Брянск",
      description: "Волонтеры БГИТУ провели масштабную уборку Центрального парка.",
      isPast: true,
      images: [
        'https://images.unsplash.com/photo-1523580494863-6f3031224c94?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
      ],
      report: {
        comment: "За 4 часа было собрано более 50 мешков мусора...",
        tasks: ["Сбор мусора", "Покраска скамеек"]
      }
    }
  ]);

  const renderContent = () => {
    if (activePage === 'my-events') {
      return <MyEventsPage />;
    }
    
    return (
      <>
        <CategoryFilter />
        <Banner events={events} />
        <CalendarSection events={events} />
        <NewsSection events={events.filter(event => event.isPast && event.report)} />
      </>
    );
  };

  return (
    <AppProvider>
      <div className="app">
        <Header 
          onMyEventsClick={() => setActivePage('my-events')}
          onHomeClick={() => setActivePage('home')}
          onCreateEventClick={() => setCreateModalOpen(true)}
        />
        
        <main>
          {renderContent()}
        </main>
        
        <Footer />
        
        <CreateEventModal 
          isOpen={createModalOpen}
          onClose={() => setCreateModalOpen(false)}
        />
      </div>
    </AppProvider>
  );
}

export default App;

.\src\index.css

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

.\src\main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './assets/styles/global.css'
import {BrowserRouter} from "react-router-dom";

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
      <BrowserRouter>
        <App />
      </BrowserRouter>
  </React.StrictMode>
)

.\index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

.\package-lock.json

{
  "name": "bgitu-afisha",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "bgitu-afisha",
      "version": "1.0.0",
      "dependencies": {
        "axios": "^1.7.2",
        "classnames": "^2.5.1",
        "date-fns": "^3.6.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-router-dom": "^6.23.1",
        "zustand": "^5.0.0"
      },
      "devDependencies": {
        "@types/react": "^18.3.3",
        "@types/react-dom": "^18.3.0",
        "@vitejs/plugin-react": "^4.2.1",
        "vite": "^4.5.3"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.0.tgz",
      "integrity": "sha512-jYnje+JyZG5YThjHiF28oT4SIZLnYOcSBb6+SDaFIyzDVSkXQmQQYclJ2R+YxcdmK0AX6x1E5OQNtuh3jHDrUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.18.20.tgz",
      "integrity": "sha512-fyi7TDI/ijKKNZTUJAQqiG5T7YjJXgnzkURqmGj13C6dCqckZBLdl4h7bkhHt/t0WP+zO9/zwroDvANaOqO5Sw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.18.20.tgz",
      "integrity": "sha512-Nz4rJcchGDtENV0eMKUNa6L12zz2zBDXuhj/Vjh18zGqB44Bi7MBMSXjgunJgjRhCmKOjnPuZp4Mb6OKqtMHLQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.18.20.tgz",
      "integrity": "sha512-8GDdlePJA8D6zlZYJV/jnrRAi6rOiNaCC/JclcXpB+KIuvfBN4owLtgzY2bsxnx666XjJx2kDPUmnTtR8qKQUg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.18.20.tgz",
      "integrity": "sha512-bxRHW5kHU38zS2lPTPOyuyTm+S+eobPUnTNkdJEfAddYgEcll4xkT8DB9d2008DtTbl7uJag2HuE5NZAZgnNEA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.18.20.tgz",
      "integrity": "sha512-pc5gxlMDxzm513qPGbCbDukOdsGtKhfxD1zJKXjCCcU7ju50O7MeAZ8c4krSJcOIJGFR+qx21yMMVYwiQvyTyQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.18.20.tgz",
      "integrity": "sha512-yqDQHy4QHevpMAaxhhIwYPMv1NECwOvIpGCZkECn8w2WFHXjEwrBn3CeNIYsibZ/iZEUemj++M26W3cNR5h+Tw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.18.20.tgz",
      "integrity": "sha512-tgWRPPuQsd3RmBZwarGVHZQvtzfEBOreNuxEMKFcd5DaDn2PbBxfwLcj4+aenoh7ctXcbXmOQIn8HI6mCSw5MQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.18.20.tgz",
      "integrity": "sha512-/5bHkMWnq1EgKr1V+Ybz3s1hWXok7mDFUMQ4cG10AfW3wL02PSZi5kFpYKrptDsgb2WAJIvRcDm+qIvXf/apvg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.18.20.tgz",
      "integrity": "sha512-2YbscF+UL7SQAVIpnWvYwM+3LskyDmPhe31pE7/aoTMFKKzIc9lLbyGUpmmb8a8AixOL61sQ/mFh3jEjHYFvdA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.18.20.tgz",
      "integrity": "sha512-P4etWwq6IsReT0E1KHU40bOnzMHoH73aXp96Fs8TIT6z9Hu8G6+0SHSw9i2isWrD2nbx2qo5yUqACgdfVGx7TA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.18.20.tgz",
      "integrity": "sha512-nXW8nqBTrOpDLPgPY9uV+/1DjxoQ7DoB2N8eocyq8I9XuqJ7BiAMDMf9n1xZM9TgW0J8zrquIb/A7s3BJv7rjg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.18.20.tgz",
      "integrity": "sha512-d5NeaXZcHp8PzYy5VnXV3VSd2D328Zb+9dEq5HE6bw6+N86JVPExrA6O68OPwobntbNJ0pzCpUFZTo3w0GyetQ==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.18.20.tgz",
      "integrity": "sha512-WHPyeScRNcmANnLQkq6AfyXRFr5D6N2sKgkFo2FqguP44Nw2eyDlbTdZwd9GYk98DZG9QItIiTlFLHJHjxP3FA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.18.20.tgz",
      "integrity": "sha512-WSxo6h5ecI5XH34KC7w5veNnKkju3zBRLEQNY7mv5mtBmrP/MjNBCAlsM2u5hDBlS3NGcTQpoBvRzqBcRtpq1A==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.18.20.tgz",
      "integrity": "sha512-+8231GMs3mAEth6Ja1iK0a1sQ3ohfcpzpRLH8uuc5/KVDFneH6jtAJLFGafpzpMRO6DzJ6AvXKze9LfFMrIHVQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.18.20.tgz",
      "integrity": "sha512-UYqiqemphJcNsFEskc73jQ7B9jgwjWrSayxawS6UVFZGWrAAtkzjxSqnoclCXxWtfwLdzU+vTpcNYhpn43uP1w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.18.20.tgz",
      "integrity": "sha512-iO1c++VP6xUBUmltHZoMtCUdPlnPGdBom6IrO4gyKPFFVBKioIImVooR5I83nTew5UOYrk3gIJhbZh8X44y06A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.18.20.tgz",
      "integrity": "sha512-e5e4YSsuQfX4cxcygw/UCPIEP6wbIL+se3sxPdCiMbFLBWu0eiZOJ7WoD+ptCLrmjZBK1Wk7I6D/I3NglUGOxg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.18.20.tgz",
      "integrity": "sha512-kDbFRFp0YpTQVVrqUd5FTYmWo45zGaXe0X8E1G/LKFC0v8x0vWrhOWSLITcCn63lmZIxfOMXtCfti/RxN/0wnQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.18.20.tgz",
      "integrity": "sha512-ddYFR6ItYgoaq4v4JmQQaAI5s7npztfV4Ag6NrhiaW0RrnOXqBkgwZLofVTlq1daVTQNhtI5oieTvkRPfZrePg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.18.20.tgz",
      "integrity": "sha512-Wv7QBi3ID/rROT08SABTS7eV4hX26sVduqDOTe1MvGMjNd3EjOz4b7zeexIR62GTIEKrfJXKL9LFxTYgkyeu7g==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.18.20.tgz",
      "integrity": "sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.19",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.19.tgz",
      "integrity": "sha512-3FL3mnMbPu0muGOCaKAhhFEYmqv9eTfPSJRJmANrCwtgK8VuxpsZDGK+m0LYAGoyO8+0j5uRe4PeyPDK1yA/hA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.3.23",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.23.tgz",
      "integrity": "sha512-/LDXMQh55EzZQ0uVAZmKKhfENivEvWz6E+EYzh+/MCjMhNsotd+ZHhBGIjFDTi6+fz0OhQQQLbTgdQIxxCsC0w==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^18.0.0"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.6.0.tgz",
      "integrity": "sha512-5Kgff+m8e2PB+9j51eGHEpn5kUzRKH2Ry0qGoe8ItJg7pqnkPrYPkDQZGgGmTa0EGarHrkjLvOdU3b1fzI8otQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.27.4",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.19",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.10.0.tgz",
      "integrity": "sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/classnames": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/classnames/-/classnames-2.5.1.tgz",
      "integrity": "sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow==",
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/date-fns": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-3.6.0.tgz",
      "integrity": "sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.179",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.179.tgz",
      "integrity": "sha512-UWKi/EbBopgfFsc5k61wFpV7WrnnSlSzW/e2XcBmS6qKYTivZlLtoll5/rdqRTxGglGHkmkW0j0pFNJG10EUIQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.18.20.tgz",
      "integrity": "sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/android-arm": "0.18.20",
        "@esbuild/android-arm64": "0.18.20",
        "@esbuild/android-x64": "0.18.20",
        "@esbuild/darwin-arm64": "0.18.20",
        "@esbuild/darwin-x64": "0.18.20",
        "@esbuild/freebsd-arm64": "0.18.20",
        "@esbuild/freebsd-x64": "0.18.20",
        "@esbuild/linux-arm": "0.18.20",
        "@esbuild/linux-arm64": "0.18.20",
        "@esbuild/linux-ia32": "0.18.20",
        "@esbuild/linux-loong64": "0.18.20",
        "@esbuild/linux-mips64el": "0.18.20",
        "@esbuild/linux-ppc64": "0.18.20",
        "@esbuild/linux-riscv64": "0.18.20",
        "@esbuild/linux-s390x": "0.18.20",
        "@esbuild/linux-x64": "0.18.20",
        "@esbuild/netbsd-x64": "0.18.20",
        "@esbuild/openbsd-x64": "0.18.20",
        "@esbuild/sunos-x64": "0.18.20",
        "@esbuild/win32-arm64": "0.18.20",
        "@esbuild/win32-ia32": "0.18.20",
        "@esbuild/win32-x64": "0.18.20"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/rollup": {
      "version": "3.29.5",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-3.29.5.tgz",
      "integrity": "sha512-GVsDdsbJzzy4S/v3dqWPJ7EfvZJfCHiDqe80IyrF59LYuP+e6U1LJoUqeuqRbwAWoMNoXivMNeNAOf5E22VA1w==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=14.18.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/vite": {
      "version": "4.5.14",
      "resolved": "https://registry.npmjs.org/vite/-/vite-4.5.14.tgz",
      "integrity": "sha512-+v57oAaoYNnO3hIu5Z/tJRZjq5aHM2zDve9YZ8HngVHbhk66RStobhb1sqPMIPEleV6cNKYK4eGrAbE9Ulbl2g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.18.10",
        "postcss": "^8.4.27",
        "rollup": "^3.27.1"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      },
      "peerDependencies": {
        "@types/node": ">= 14",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/zustand": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/zustand/-/zustand-5.0.6.tgz",
      "integrity": "sha512-ihAqNeUVhe0MAD+X8M5UzqyZ9k3FFZLBTtqo6JLPwV53cbRB/mJwBI0PxcIgqhBBHlEs8G45OTDTMq3gNcLq3A==",
      "license": "MIT",
      "engines": {
        "node": ">=12.20.0"
      },
      "peerDependencies": {
        "@types/react": ">=18.0.0",
        "immer": ">=9.0.6",
        "react": ">=18.0.0",
        "use-sync-external-store": ">=1.2.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "immer": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "use-sync-external-store": {
          "optional": true
        }
      }
    }
  }
}

.\package.json

{
  "name": "bgitu-afisha",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.7.2",
    "classnames": "^2.5.1",
    "date-fns": "^3.6.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.23.1",
    "zustand": "^5.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.2.1",
    "vite": "^4.5.3"
  }
}